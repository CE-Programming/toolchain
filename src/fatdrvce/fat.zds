;  235	static void dealloc_fat(uint32_t fat_entry) {
fat.dealloc:
	LD	HL,-17
	CALL	__frameset
;  236		uint32_t sector, index;
;  237		unsigned int shift_sec, shift_index;
;  238		if (fat_state.type == FAT_TYPE_FAT16) {
	LD	A,(_fat_state+24)
	OR	A,A
	JQ	NZ,L_9
;  239			shift_sec = 8;
	LD	BC,8
	LD	(IX+-6),BC
;  240			shift_index = 1;
	LD	BC,1
	LD	(IX+-13),BC
;  241		} else {
	JQ	L_20
L_9:
;  242			shift_sec = 7;
	LD	BC,7
	LD	(IX+-6),BC
;  243			shift_index = 2;
	LD	BC,2
	LD	(IX+-13),BC
;  244		}
;  245	
;  246		for (;;) {
L_20:
;  247			if (end_of_chain_mark(fat_entry) || !fat_entry)
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	fat.endofchainmark
	POP	BC
	POP	BC
	OR	A,A
	JQ	NZ,L_23
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__lcmpzero
	JQ	Z,L_23
;  248				return;
;  249			sector = (fat_entry >> shift_sec) + fat_state.fat_pos;
	LD	HL,(IX+-6)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lshru
	LD	E,A
	PUSH	BC
	POP	HL
	LD	BC,(_fat_state+12)
	LD	A,(_fat_state+15)
	CALL	__ladd
	LD	(IX+-10),HL
	LD	(IX+-7),E
;  250			read_sector(sector, sector_buff);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  251			valid_sector:
L_13:
;  252	
;  253			index = (fat_entry << shift_index) & 0x1FF;
	LD	HL,(IX+-13)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lshl
	LD	E,A
	PUSH	BC
	POP	HL
	LD	BC,511
	XOR	A,A
	CALL	__land
	LD	(IX+-17),HL
	LD	(IX+-14),E
;  254			fat_entry = GET16(sector_buff + index);
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-3),HL
;  255			if (shift_index == 1) {
	LD	HL,(IX+-13)
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JQ	NZ,L_15
;  256				fat_entry = GET16(sector_buff + index);
	LD	HL,(IX+-3)
	LD	BC,(HL)
	CALL	__stoiu
	LD	(IX+6),HL
	XOR	A,A
	LD	(IX+9),A
;  257				SET16(sector_buff + index, 0);
	LD	HL,(IX+-3)
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  258			} else {
	JQ	L_19
L_15:
;  259				fat_entry = GET32(sector_buff + index);
	LD	HL,(IX+-3)
	LD	BC,(HL)
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	LD	(IX+6),BC
	LD	(IX+9),A
;  260				SET32(sector_buff + index, 0);
	LD	HL,(IX+-3)
	LD	BC,0
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),0
;  261			}
L_19:
;  262			if (end_of_chain_mark(fat_entry) || ((fat_entry >> shift_sec) + fat_state.fat_pos != sector)) {
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	fat.endofchainmark
	POP	BC
	POP	BC
	OR	A,A
	JQ	NZ,L_17
	LD	HL,(IX+-6)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lshru
	LD	E,A
	PUSH	BC
	POP	HL
	LD	BC,(_fat_state+12)
	LD	A,(_fat_state+15)
	CALL	__ladd
	LD	BC,(IX+-10)
	LD	A,(IX+-7)
	CALL	__lcmpu
	JQ	Z,L_13
L_17:
;  263				write_sector(sector, sector_buff);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  264				write_sector(sector + fat_state.fat_size, sector_buff);
	LD	BC,(_fat_state+8)
	XOR	A,A
	LD	E,A
	PUSH	BC
	POP	HL
	LD	BC,(IX+-10)
	LD	A,(IX+-7)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  265			} else
	JQ	L_20
;  266				goto valid_sector;
;  267		}
;  268	}
L_23:
	LD	SP,IX
	POP	IX
	RET	

;  271	static uint32_t locate_record(const char *path, unsigned int *record_index, const char *tail) {
_locate_record:
	LD	HL,-54
	CALL	__frameset
;  272		char component[13], fatname[11];
;  273		unsigned int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  274		uint32_t cur_sector;
;  275		bool recurse = false, file = false;
	LD	(IX+-8),0
	LD	(IX+-13),0
;  276	
;  277		cur_sector = fat_state.root_dir_pos;
	LD	BC,(_fat_state+16)
	LD	A,(_fat_state+19)
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  278	
;  279		found_component:
;  280		while (*path == '/')
	JQ	L_26
L_27:
;  281			path++;
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
L_26:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	RLA
	SBC	HL,HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JQ	Z,L_27
;  282		if (!*path) {
	LD	HL,(IX+6)
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L_36
;  283			if (tail) {
	LD	HL,(IX+12)
	CALL	__icmpzero
	JQ	Z,L_33
;  284				path = tail;
	LD	BC,(IX+12)
	LD	(IX+6),BC
;  285				if (recurse)
	LD	A,(IX+-8)
	OR	A,A
	JQ	NZ,L_28
	JQ	L_38
;  286					goto recurse;
;  287			} else if (!recurse)
L_33:
	LD	A,(IX+-8)
	OR	A,A
	JQ	NZ,L_31
	OR	A,A
;  288				return 0;
	SBC	HL,HL
	LD	E,0
	JQ	L_80
;  289			else {
L_31:
;  290				*record_index = i;
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	LD	(HL),BC
;  291				return cur_sector;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	JQ	L_80
;  292			}
;  293		} else if (recurse) {
L_36:
	LD	A,(IX+-8)
	OR	A,A
	JQ	Z,L_38
L_28:
;  294			recurse:
;  295			cur_sector = GET_ENTRY_CLUSTER(i);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	fat.getentrycluster
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  296			cur_sector = cluster_to_sector(cur_sector);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  297		}
L_38:
;  298		memcpy(component, path, 13);
	LD	BC,13
	LD	HL,(IX+6)
	LEA	DE,IX+-50
	LDIR
;  299		for (i = 0; *path && *path != '/'; i++)
	LD	BC,0
	LD	(IX+-3),BC
	JQ	L_44
L_42:
;  300			path++;
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_44:
	LD	HL,(IX+6)
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L__18
	LD	A,1
	JQ	L__19
L__18:
	XOR	A,A
L__19:
	LD	(IX+-12),A
	OR	A,A
	JQ	NZ,L_47
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	RLA
	SBC	HL,HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JQ	NZ,L_42
L_47:
;  301		if (*path)
	LD	A,(IX+-12)
	OR	A,A
	JQ	NZ,L_49
;  302			path++;
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
L_49:
;  303		if (i < 13)
	LD	BC,13
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	NC,L_52
;  304			component[i] = 0;
	LD	BC,(IX+-3)
	LEA	HL,IX+-50
	ADD	HL,BC
	LD	(HL),0
L_52:
;  305		if (file && *path)	/* A non-directory mid-path */
	LD	A,(IX+-13)
	OR	A,A
	JQ	Z,L_53
	LD	HL,(IX+6)
	LD	A,(HL)
	OR	A,A
	JQ	Z,L_53
	OR	A,A
;  306			return 0;
	SBC	HL,HL
	LD	E,0
	JQ	L_80
L_53:
;  307		fname_to_fatname(component, fatname);
	PEA	IX+-37
	PEA	IX+-50
	CALL	fat.fname2fatname
	POP	BC
	POP	BC
;  308		for (;;) {
L_78:
;  309			read_sector(cur_sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  310	
;  311			for (i = 0; i < 16; i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JQ	L_68
L_66:
;  312				if ((sector_buff[i * 32 + 11] & 0xF) == 0xF)	/* Long filename entry */
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-16),HL
	LD	IY,(IX+-16)
	LEA	IY,IY+11
	LD	(IX+-22),IY
	PUSH	IY
	POP	BC
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	AND	A,15
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,15
	SBC	HL,BC
	JQ	Z,L_67
;  313					continue;
;  314				if (!sector_buff[i * 32])	/* End of list */
	LD	BC,(IX+-16)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-11),HL
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L_59
	OR	A,A
;  315					return 0;
	SBC	HL,HL
	LD	E,0
	JQ	L_80
L_59:
;  316				if (sector_buff[i * 32] == 0xE5)
	LD	HL,(IX+-11)
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,229
	SBC	HL,BC
	JQ	Z,L_67
;  317					/* Deleted record, skip */
;  318					continue;
;  319				/* This is a valid file */
;  320	
;  321				if (!memcmp(fatname, &sector_buff[i * 32], 11)) {
	LD	BC,11
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	PEA	IX+-37
_memcmp := 0000A0h
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JQ	NZ,L_67
;  322					recurse = true;
	LD	(IX+-8),1
;  323					file = (sector_buff[i * 32 + 11] & 0x10) ? false : true;
	LD	BC,(IX+-22)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	AND	A,16
	JQ	Z,L_62
	LD	BC,0
	LD	(IX+-19),BC
	JQ	L_63
L_62:
	LD	BC,1
	LD	(IX+-19),BC
L_63:
	LD	A,(IX+-19)
	LD	(IX+-13),A
;  324					goto found_component;
	JQ	L_26
;  325				}
;  326			}
L_67:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_68:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_66
;  327	
;  328			if (!recurse) {	/* Don't cross cluster boundary for root directory */
	LD	A,(IX+-8)
	OR	A,A
	JQ	NZ,L_77
;  329				if (fat_state.type == FAT_TYPE_FAT16) {
	LD	A,(_fat_state+24)
	OR	A,A
	JQ	NZ,L_77
;  330					cur_sector++;	/* Lets just cross our fingers and hope we don't overrun */
INCREMENT_SECTOR:
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	A,1
	CALL	__ladd_b
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  331					continue;
	JQ	L_78
;  332				}
;  333			}
L_77:
;  334	
;  335			if (sector_to_cluster(cur_sector) != sector_to_cluster(cur_sector + 1)) {
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	A,1
	CALL	__ladd_b
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	fat.sector2cluster
	POP	BC
	POP	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	(IX+-26),HL
	LD	(IX+-23),E
	CALL	fat.sector2cluster
	POP	BC
	POP	BC
	LD	A,E
	PUSH	HL
	POP	BC
	PUSH	HL
	POP	BC
	LD	HL,(IX+-26)
	LD	E,(IX+-23)
	CALL	__lcmpu
	JQ	Z,L_76
;  336				cur_sector = cluster_to_sector(next_cluster(sector_to_cluster(cur_sector)));
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	fat.sector2cluster
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	fat.nextcluster
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  337				if (!cur_sector)
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	CALL	__lcmpzero
	JQ	NZ,L_78
	OR	A,A
;  338					return 0;
	SBC	HL,HL
	LD	E,0
	JQ	L_80
;  339			} else
L_76:
;  340				cur_sector++;
	JQ	INCREMENT_SECTOR
;  342	}
L_80:
	LD	SP,IX
	POP	IX
	RET	

;  345	uint32_t alloc_cluster(uint32_t entry_sector, uint8_t entry_index, uint32_t old_cluster) {
fat.alloc_cluster:
	LD	HL,-52
	CALL	__frameset
;  346		unsigned int i, j;
;  347		uint32_t cluster = 0, avail_cluster;
	LD	BC,0
	LD	(IX+-14),BC
	XOR	A,A
	LD	(IX+-11),A
;  348		int fat_size, ent_per_sec, eocm, mask, shift;
;  349	
;  350		if (fat_state.type == FAT_TYPE_FAT16) {
	LD	A,(_fat_state+24)
	OR	A,A
	JQ	NZ,L_82
;  351			fat_size = 2;
	LD	BC,2
	LD	(IX+-17),BC
;  352			ent_per_sec = 256;
	LD	BC,256
	LD	(IX+-20),BC
;  353			eocm = 0xFFFF;
	LD	BC,65535
	LD	(IX+-23),BC
;  354			mask = 0xFF;
	LD	BC,255
	LD	(IX+-26),BC
;  355			shift = 1;
	LD	BC,1
	LD	(IX+-29),BC
;  356		} else {
	JQ	L_105
L_82:
;  357			fat_size = 4;
	LD	BC,4
	LD	(IX+-17),BC
;  358			ent_per_sec = 128;
	LD	BC,128
	LD	(IX+-20),BC
;  359			eocm = 0xFFFFFFF;
	LD	BC,16777215
	LD	(IX+-23),BC
;  360			mask = 0x7F;
	LD	BC,127
	LD	(IX+-26),BC
;  361			shift = 2;
	LD	BC,2
	LD	(IX+-29),BC
;  362		}
L_105:
;  363	
;  364		for (i = 0; i < fat_state.fat_size; i++) {
	LD	BC,0
	LD	(IX+-3),BC
	JQ	L_104
L_102:
;  365			read_sector(fat_state.fat_pos + i, sector_buff);
	XOR	A,A
	LD	B,A
	LD	A,(_fat_state+15)
	LD	E,A
	LD	A,B
	LD	BC,(IX+-3)
	LD	HL,(_fat_state+12)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  366	
;  367			for (j = 0; j < 512 / fat_size; j++) {
	LD	BC,0
	LD	(IX+-6),BC
	JQ	L_101
L_99:
;  368				avail_cluster = (fat_size == 2) ? GET16(sector_buff + j * fat_size) : GET32(sector_buff + j * fat_size);
	LD	BC,2
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JQ	Z,L__39
	LD	A,1
	JQ	L__40
L__39:
	XOR	A,A
L__40:
	LD	(IX+-7),A
	OR	A,A
	JQ	NZ,L_87
	LD	HL,(IX+-17)
	LD	BC,(IX+-6)
	CALL	__imulu
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	(IX+-32),HL
	LD	HL,(IX+-10)
	LD	BC,(HL)
	CALL	__stoiu
	LD	(IX+-36),HL
	XOR	A,A
	LD	(IX+-33),A
	JQ	L_88
L_87:
	LD	HL,(IX+-17)
	LD	BC,(IX+-6)
	CALL	__imulu
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-10),HL
	LD	(IX+-32),HL
	LD	HL,(IX+-10)
	LD	BC,(HL)
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	LD	(IX+-36),BC
	LD	(IX+-33),A
L_88:
	LD	BC,(IX+-36)
	LD	A,(IX+-33)
	LD	(IX+-40),BC
	LD	(IX+-37),A
;  369				if (!avail_cluster) {
	PUSH	BC
	POP	HL
	LD	E,(IX+-37)
	CALL	__lcmpzero
	JQ	NZ,L_100
;  370					cluster = i * ent_per_sec + j;
	XOR	A,A
	LD	E,A
	LD	BC,(IX+-20)
	CALL	__itol
	LD	HL,(IX+-3)
	CALL	__lmulu
	LD	BC,(IX+-6)
	XOR	A,A
	CALL	__ladd
	LD	(IX+-14),HL
	LD	(IX+-11),E
;  371					if (fat_size == 2)
	LD	A,(IX+-7)
	OR	A,A
	JQ	NZ,L_90
;  372						SET16(sector_buff + j * fat_size, eocm);
	LD	HL,(IX+-10)
	LD	BC,(IX+-23)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  373					else
	JQ	L_91
L_90:
;  374						SET32(sector_buff + j * fat_size, eocm);
	LD	BC,(IX+-23)
	CALL	__itol
	LD	IY,(IX+-32)
	LD	(IY),BC
	LD	(IY+3),A
L_91:
;  375					write_sector(fat_state.fat_pos + i, sector_buff);
	XOR	A,A
	LD	B,A
	LD	A,(_fat_state+15)
	LD	E,A
	LD	A,B
	LD	BC,(IX+-3)
	LD	HL,(_fat_state+12)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  376					write_sector(fat_state.fat_pos + fat_state.fat_size + i, sector_buff);
	XOR	A,A
	LD	B,A
	LD	A,(_fat_state+15)
	LD	E,A
	LD	A,B
	LD	BC,(_fat_state+8)
	LD	HL,(_fat_state+12)
	CALL	__ladd
	LD	BC,(IX+-3)
	XOR	A,A
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  377					if (old_cluster) {
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__lcmpzero
	JQ	Z,L_96
;  378						read_sector(fat_state.fat_pos + old_cluster / ent_per_sec, sector_buff);
	LD	BC,(IX+-20)
	CALL	__itol
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__ldivu
	LD	(IX+-52),E
	LD	A,(_fat_state+15)
	LD	E,A
	PUSH	HL
	POP	BC
	LD	HL,(_fat_state+12)
	LD	A,(IX+-52)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  379						if (fat_size == 2)
	LD	A,(IX+-7)
	OR	A,A
	JQ	NZ,L_93
;  380							SET16(sector_buff + ((old_cluster & mask) << shift), cluster);
	LD	BC,(IX+-26)
	CALL	__itol
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__land
	LD	BC,(IX+-29)
	CALL	__itol
	LD	(IX+-51),HL
	PUSH	BC
	POP	HL
	LD	BC,(IX+-51)
	LD	A,E
	CALL	__lshl
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	BC,(IX+-14)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  381						else
	JQ	L_94
L_93:
;  382							SET32(sector_buff + ((old_cluster & mask) << shift), cluster);
	LD	BC,(IX+-26)
	CALL	__itol
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__land
	LD	BC,(IX+-29)
	CALL	__itol
	LD	(IX+-48),HL
	PUSH	BC
	POP	HL
	LD	BC,(IX+-48)
	LD	A,E
	CALL	__lshl
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	BC,(IX+-14)
	LD	A,(IX+-11)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
L_94:
;  383						write_sector(fat_state.fat_pos + old_cluster / ent_per_sec, sector_buff);
	LD	BC,(IX+-20)
	CALL	__itol
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__ldivu
	LD	(IX+-45),E
	LD	A,(_fat_state+15)
	LD	E,A
	PUSH	HL
	POP	BC
	LD	HL,(_fat_state+12)
	LD	A,(IX+-45)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  384						write_sector(fat_state.fat_pos + fat_state.fat_size + old_cluster / ent_per_sec, sector_buff);
	XOR	A,A
	LD	B,A
	LD	A,(_fat_state+15)
	LD	E,A
	LD	A,B
	LD	BC,(_fat_state+8)
	LD	HL,(_fat_state+12)
	CALL	__ladd
	LD	(IX+-41),E
	LD	(IX+-44),HL
	LD	BC,(IX+-20)
	CALL	__itol
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__ldivu
	LD	A,E
	PUSH	HL
	POP	BC
	LD	HL,(IX+-44)
	LD	E,(IX+-41)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  385					}
;  386	
;  387					goto allocated;
	JQ	L_96
;  388				}
;  389			}
L_100:
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_101:
	LD	HL,512
	LD	BC,(IX+-17)
	CALL	__idivs
	PUSH	HL
	POP	BC
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_99
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  390		}
L_104:
	LD	BC,(_fat_state+8)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_102
L_96:
;  391	
;  392		allocated:
;  393		if (!old_cluster) {
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__lcmpzero
	JQ	NZ,L_108
;  394			read_sector(entry_sector, sector_buff);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  395			SET16(sector_buff + (entry_index * 32 + 20), cluster >> 16);
	LD	BC,(IX+-14)
	LD	A,(IX+-11)
	LD	L,16
	CALL	__lshru
	LD	A,(IX+12)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	DE,IY+20
	LD	HL,(fat.sectorbuffer)
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  396			SET16(sector_buff + (entry_index * 32 + 26), cluster);
	LD	A,(IX+12)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	ADD	HL,HL
	LD	BC,(IX+-14)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	DE,IY+26
	LD	HL,(fat.sectorbuffer)
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  397			write_sector(entry_sector, sector_buff);
	LD	C,(IX+9)
	LD	B,0
	LD	DE,(fat.sectorbuffer)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	PUSH	DE
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  398		}
L_108:
;  399	
;  400		return cluster;
	LD	HL,(IX+-14)
	LD	E,(IX+-11)
;  401	}
	LD	SP,IX
	POP	IX
	RET		

;  414	static uint32_t alloc_entry(uint32_t parent_entry_sector, uint8_t parent_entry_index, uint32_t first_cluster, unsigned int *index) {
_alloc_entry:
	LD	HL,-21
	CALL	__frameset
;  415		unsigned int i, j;
;  416		uint32_t sector, old_cluster, old_sector = 0;
	LD	BC,0
	LD	(IX+-17),BC
	XOR	A,A
	LD	(IX+-14),A
;  417	
;  418		sector = cluster_to_sector(first_cluster);
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-10),HL
	LD	(IX+-7),E
;  419		if (!sector) {
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	CALL	__lcmpzero
	JQ	NZ,L_127
;  420			*index = 0;
	LD	HL,(IX+21)
	LD	BC,0
	LD	(HL),BC
;  421			return do_alloc_entry(parent_entry_sector, parent_entry_index, first_cluster);
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	LD	C,(IX+12)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	fat.doallocentry
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	JQ	L_130
;  422		}
;  423	
;  424		for (;;) {
L_127:
;  425			for (i = 0; i < fat_state.cluster_size; i++) {
	LD	BC,0
	LD	(IX+-6),BC
	JQ	L_124
L_122:
;  426				read_sector(sector + i, sector_buff);
	LD	BC,(IX+-6)
	XOR	A,A
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  427				for (j = 0; j < 16; j++) {
	LD	BC,0
	LD	(IX+-3),BC
	JQ	L_121
L_119:
;  428					if (old_sector) {
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	CALL	__lcmpzero
	JQ	Z,L_118
;  429						sector_buff[j * 32 + 11] = 0;
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),0
;  430						sector_buff[j * 32] = 0;
	LD	HL,(IX+-3)
	LD	BC,(fat.sectorbuffer)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(HL),0
;  431						write_sector(sector, sector_buff);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  432						return old_sector;
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	JQ	L_130
;  433					}
L_118:
;  434	
;  435					if (sector_buff[j * 32] == 0xE5) {
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,229
	SBC	HL,BC
	JQ	NZ,L_117
;  436						*index = j;
	LD	HL,(IX+21)
	LD	BC,(IX+-3)
	LD	(HL),BC
;  437						return sector;
	LD	HL,(IX+-10)
	LD	E,(IX+-7)
	JQ	L_130
;  438					} else if (!sector_buff[j * 32]) {
L_117:
	LD	HL,(IX+-13)
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L_120
;  439						*index = j;
	LD	HL,(IX+21)
	LD	BC,(IX+-3)
	LD	(HL),BC
;  440						old_sector = sector;
	LD	BC,(IX+-10)
	LD	A,(IX+-7)
	LD	(IX+-17),BC
	LD	(IX+-14),A
;  441					}
;  442				}
L_120:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_121:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_119
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  443			}
L_124:
	LD	A,(_fat_state+1)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	PUSH	HL
	POP	BC
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_122
;  444	
;  445			old_cluster = first_cluster;
	LD	BC,(IX+15)
	LD	A,(IX+18)
	LD	(IX+-21),BC
	LD	(IX+-18),A
;  446			first_cluster = next_cluster(first_cluster);
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+15)
	PUSH	BC
	CALL	fat.nextcluster
	POP	BC
	POP	BC
	LD	(IX+15),HL
	LD	(IX+18),E
;  447			if (!first_cluster) {
	LD	HL,(IX+15)
	LD	E,(IX+18)
	CALL	__lcmpzero
	JQ	NZ,L_127
;  448				*index = 0;
	LD	HL,(IX+21)
	LD	BC,0
	LD	(HL),BC
;  449				return do_alloc_entry(parent_entry_sector, parent_entry_index, old_cluster);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	C,(IX+12)
	LD	B,0
	PUSH	BC
	LD	C,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	fat.doallocentry
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  450			}
;  451		}
;  452	}
L_130:
	LD	SP,IX
	POP	IX
	RET	

;  455	static uint32_t alloc_entry_root(unsigned int *index) {
_alloc_entry_root:
	LD	HL,-18
	CALL	__frameset
;  456		unsigned int i, j;
;  457		uint32_t sector, old_sector = fat_state.root_dir_pos;
	LD	BC,(_fat_state+16)
	LD	A,(_fat_state+19)
	LD	(IX+-15),BC
	LD	(IX+-12),A
;  458		bool alloc = false;
	LD	(IX+-11),0
;  459	
;  460		if (fat_state.type == FAT_TYPE_FAT32) {
	LD	A,(_fat_state+24)
	CP	A,1
	JQ	NZ,L_132
;  461			return alloc_entry(0, 0, sector_to_cluster(old_sector), index);
	LD	BC,(IX+6)
	PUSH	BC
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	fat.sector2cluster
	POP	BC
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_alloc_entry
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	JQ	L_149
;  462		}
L_132:
;  463	
;  464		sector = old_sector;
	LD	BC,(IX+-15)
	LD	A,(IX+-12)
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  465		for (i = 0; i < fat_state.root_directory_size / 16; i++) {
	LD	BC,0
	LD	(IX+-10),BC
	JQ	L_147
L_145:
;  466			read_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  467	
;  468			for (j = 0; j < 16; j++) {
	LD	BC,0
	LD	(IX+-3),BC
	JQ	L_142
L_140:
;  469				if (!alloc) {
	LD	A,(IX+-11)
	OR	A,A
	JQ	NZ,L_139
;  470					if (sector_buff[j * 32] == 0xE5) {
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,229
	SBC	HL,BC
	JQ	NZ,L_137
;  471						*index = j;
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	LD	(HL),BC
;  472						return sector;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	JQ	L_149
;  473					} else if (!sector_buff[j * 32]) {
L_137:
	LD	HL,(IX+-18)
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L_141
;  474						*index = j;
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	LD	(HL),BC
;  475						alloc = true;
	LD	(IX+-11),1
;  476						old_sector = sector;
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	LD	(IX+-15),BC
	LD	(IX+-12),A
;  477					}
;  478				} else {
	JQ	L_141
L_139:
;  479					sector_buff[j * 32] = 0;
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),0
;  480					sector_buff[j * 32 + 11] = 0;
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),0
;  481					write_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  482					return old_sector;
	LD	HL,(IX+-15)
	LD	E,(IX+-12)
	JQ	L_149
;  483				}
;  484			}
L_141:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_142:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_140
;  485	
;  486			sector++;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	A,1
	CALL	__ladd_b
	LD	(IX+-7),HL
	LD	(IX+-4),E
	LD	BC,(IX+-10)
	INC	BC
	LD	(IX+-10),BC
;  487		}
L_147:
	LD	BC,(_fat_state+2)
	CALL	__stoiu
	LD	BC,16
	CALL	__idivs
	PUSH	HL
	POP	BC
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_145
	OR	A,A
;  488	
;  489		return 0;
	SBC	HL,HL
	LD	E,0
;  490	}
L_149:
	LD	SP,IX
	POP	IX
	RET	

;  505	int8_t fat_open(const char *path, int flags) {
_fat_open:
	LD	HL,-16
	CALL	__frameset
;  506		unsigned int i, index;
;  507		uint32_t sector;
;  508		struct FATFileDescriptor *desc = NULL;
	LD	BC,0
	LD	(IX+-3),BC
;  509	
;  510		for (i = 0; i < MAX_FD_OPEN; i++) {
	LD	(IX+-6),BC
	JQ	L_154
L_152:
;  511			desc = &fat_fd[i];
	LD	HL,(IX+-6)
	LD	A,23
	CALL	__imul_b
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-3),HL
;  512			if (desc->key < 0)
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	OR	A,A
	JP	M,L_156
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
;  513				break;
;  514		}
L_154:
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_152
L_156:
;  515	
;  516		if (desc == NULL)
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JQ	NZ,L_158
;  517			return -1;
	LD	A,255
	JQ	L_174
L_158:
;  518	
;  519		if (i == MAX_FD_OPEN)
	LD	BC,4
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JQ	NZ,L_160
;  520			return -1;
	LD	A,255
	JQ	L_174
L_160:
;  521	
;  522		if (!(sector = locate_record(path, &index, NULL)))
	LD	BC,0
	PUSH	BC
	PEA	IX+-9
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_locate_record
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-13),HL
	LD	(IX+-10),E
	LD	HL,(IX+-13)
	LD	E,(IX+-10)
	CALL	__lcmpzero
	JQ	NZ,L_161
;  523			return -1;
	LD	A,255
	JQ	L_174
L_161:
;  524		read_sector(sector, sector_buff);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  525	
;  526		if (sector_buff[index * 32 + 11] & 0x10)
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	AND	A,16
	JQ	Z,L_167
;  527			/* Don't allow opening a directory */
;  528			return -1;
	LD	A,255
	JQ	L_174
L_167:
;  529	
;  530		desc->write = flags & O_WRONLY ? true : false;
	LD	A,(IX+9)
	AND	A,2
	OR	A,A
	SBC	HL,HL
	LD	L,A
	CALL	__icmpzero
	JQ	Z,L_165
	LD	BC,1
	LD	(IX+-16),BC
	JQ	L_166
L_165:
	LD	BC,0
	LD	(IX+-16),BC
L_166:
	LD	A,(IX+-16)
	LD	IY,(IX+-3)
	LD	(IY+22),A
;  531		desc->entry_sector = sector;
	LD	BC,(IX+-13)
	LD	A,(IX+-10)
	LD	(IY+1),BC
	LD	(IY+4),A
;  532		desc->entry_index = index;
	LD	A,(IX+-9)
	LD	(IY+5),A
;  533		desc->first_cluster = GET_ENTRY_CLUSTER(index);
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	fat.getentrycluster
	POP	BC
	LD	IY,(IX+-3)
	LD	(IY+6),HL
	LD	(IY+9),E
;  534		if (desc->first_cluster == 0) {
	LD	HL,(IY+6)
	LD	E,(IY+9)
	CALL	__lcmpzero
	JQ	NZ,L_171
;  535			if (desc->write)
	LD	IY,(IX+-3)
	LD	A,(IY+22)
	OR	A,A
	JQ	Z,L_169
;  536				desc->first_cluster = alloc_cluster(desc->entry_sector, desc->entry_index, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	IY,(IX+-3)
	LD	C,(IY+5)
	LD	B,0
	PUSH	BC
	LD	BC,(IY+1)
	LD	A,(IY+4)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	fat.alloc_cluster
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LD	(IY+6),HL
	LD	(IY+9),E
L_169:
;  537			desc->file_size = 0;
	LD	BC,0
	LD	IY,(IX+-3)
	LD	(IY+18),BC
	LD	(IY+21),0
;  538		} else {
	JQ	L_172
L_171:
;  539			desc->file_size = GET32(sector_buff + (index * 32 + 28));
	LD	HL,(IX+-9)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	BC,IY+28
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	BC,(HL)
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	LD	IY,(IX+-3)
	LD	(IY+18),BC
	LD	(IY+21),A
;  540		}
L_172:
;  541	
;  542		desc->current_cluster = desc->first_cluster;
	LD	IY,(IX+-3)
	LD	BC,(IY+6)
	LD	A,(IY+9)
	LD	(IY+10),BC
	LD	(IY+13),A
;  543		desc->fpos = 0;
	LD	BC,0
	LD	(IY+14),BC
	LD	(IY+17),0
;  544		desc->key = fat_key++ & 63;
	LD	A,(_fat_key)
	LD	(IY+0),A

	LD	A,(_fat_key)
	INC	A
	AND	A,63
	LD	(_fat_key),A
;  545		return desc->key;
	LD	A,(IY+0)
;  546	}
L_174:
	LD	SP,IX
	POP	IX
	RET	

;  577	bool fat_read_sect(int8_t fd) {
_fat_read_sect:
	LD	HL,-31
	CALL	__frameset
;  578		uint8_t i;
;  579		uint32_t old_cluster, sector;
;  580		struct FATFileDescriptor *desc = NULL;
	LD	BC,0
	LD	(IX+-3),BC
;  581	
;  582		if (fd < 0)
	LD	A,(IX+6)
	OR	A,A
	JP	P,L_181
;  583			return false;
	XOR	A,A
	JQ	L_195
L_181:
;  584		for (i = 0; i < MAX_FD_OPEN; i++) {
	LD	(IX+-4),0
	JQ	L_180
L_178:
;  585			desc = &fat_fd[i];
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	LD	A,23
	CALL	__imul_b
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-3),HL
;  586			if (desc->key == fd)
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	CP	A,(IX+6)
	JQ	Z,L_183
	INC	(IX+-4)
;  587				break;
;  588		}
L_180:
	LD	A,(IX+-4)
	CP	A,4
	JQ	C,L_178
L_183:
;  589	    if (desc == NULL)
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JQ	NZ,L_185
;  590	        return false;
	XOR	A,A
	JQ	L_195
L_185:
;  591		if (!desc->current_cluster)
	LD	IY,(IX+-3)
	LD	BC,(IY+10)
	LD	A,(IY+13)
	LD	(IX+-20),BC
	LD	(IX+-17),A
	PUSH	BC
	POP	HL
	LD	E,(IX+-17)
	CALL	__lcmpzero
	JQ	NZ,L_187
;  592			return false;
	XOR	A,A
	JQ	L_195
L_187:
;  593		if (desc->fpos == desc->file_size)
	LD	IY,(IX+-3)
	LD	BC,(IY+14)
	LD	A,(IY+17)
	LD	(IX+-8),BC
	LD	(IX+-5),A
	LD	HL,(IY+18)
	LD	E,(IY+21)
	LD	A,(IX+-5)
	CALL	__lcmpu
	JQ	NZ,L_188
;  594			return false;
	XOR	A,A
	JQ	L_195
L_188:
;  595		sector = cluster_to_sector(desc->current_cluster) + ((desc->fpos >> 9) % fat_state.cluster_size);
	LD	C,(IX+-17)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-20)
	PUSH	BC
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-27),HL
	LD	L,9
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__lshru
	LD	(IX+-28),E
	LD	E,A
	OR	A,A
	SBC	HL,HL
	LD	A,(_fat_state+1)
	LD	L,A
	LD	(IX+-31),BC
	PUSH	HL
	POP	BC
	LD	A,H
	LD	HL,(IX+-31)
	CALL	__lremu
	LD	A,E
	PUSH	HL
	POP	BC
	LD	HL,(IX+-27)
	LD	E,(IX+-28)
	CALL	__ladd
	LD	(IX+-24),HL
	LD	(IX+-21),E
;  596	
;  597		desc->fpos += 512;
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	LD	BC,512
	XOR	A,A
	CALL	__ladd
	LD	IY,(IX+-3)
	LD	(IY+14),HL
	LD	(IY+17),E
;  598		if (desc->file_size < desc->fpos)
	LD	BC,(IY+18)
	LD	A,(IY+21)
	LD	(IX+-16),BC
	LD	(IX+-13),A
	PUSH	BC
	POP	HL
	LD	E,(IX+-13)
	LD	BC,(IY+14)
	LD	A,(IY+17)
	CALL	__lcmpu
	JQ	NC,L_193
;  599			desc->fpos = desc->file_size & (~0x1FF);
	LD	HL,(IX+-16)
	LD	E,(IX+-13)
	LD	BC,16776704
	LD	A,255
	CALL	__land
	LD	IY,(IX+-3)
	LD	(IY+14),HL
	LD	(IY+17),E
L_193:
;  600		if (!(desc->fpos % (fat_state.cluster_size * 512))) {
	LD	A,(_fat_state+1)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	LD	A,9
	CALL	__ishl_b
	PUSH	HL
	POP	BC
	LD	IY,(IX+-3)
	LD	HL,(IY+14)
	LD	E,(IY+17)
	CALL	__itol
	CALL	__lremu
	CALL	__lcmpzero
	JQ	NZ,L_194
;  601			old_cluster = desc->current_cluster;
	LD	IY,(IX+-3)
	LD	BC,(IY+10)
	LD	A,(IY+13)
	LD	(IX+-12),BC
	LD	(IX+-9),A
;  602			desc->current_cluster = next_cluster(desc->current_cluster);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	CALL	fat.nextcluster
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LD	(IY+10),HL
	LD	(IY+13),E
;  603			if (!desc->current_cluster && desc->write)
	LD	HL,(IY+10)
	LD	E,(IY+13)
	CALL	__lcmpzero
	JQ	NZ,L_194
	LD	IY,(IX+-3)
	LD	A,(IY+22)
	OR	A,A
	JQ	Z,L_194
;  604				desc->current_cluster = alloc_cluster(desc->entry_sector, desc->entry_index, old_cluster);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	IY,(IX+-3)
	LD	C,(IY+5)
	LD	B,0
	PUSH	BC
	LD	BC,(IY+1)
	LD	A,(IY+4)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	fat.alloc_cluster
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LD	(IY+10),HL
	LD	(IY+13),E
;  605		}
L_194:
;  606	
;  607		read_sector(sector, sector_buff);
	LD	C,(IX+-21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  608	
;  609		return true;
	LD	A,1
;  610	}
L_195:
	LD	SP,IX
	POP	IX
	RET	

;  613	bool fat_write_sect(int8_t fd) {
_fat_write_sect:
	LD	HL,-24
	CALL	__frameset
;  614		uint8_t i;
;  615		uint32_t old_cluster, sector;
;  616		struct FATFileDescriptor *desc = NULL;
	LD	BC,0
	LD	(IX+-3),BC
;  617	
;  618		if (fd < 0)
	LD	A,(IX+6)
	OR	A,A
	JP	P,L_202
;  619			return false;
	XOR	A,A
	JQ	L_214
L_202:
;  620		for (i = 0; i < MAX_FD_OPEN; i++) {
	LD	(IX+-4),0
	JQ	L_201
L_199:
;  621			desc = &fat_fd[i];
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	LD	A,23
	CALL	__imul_b
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-3),HL
;  622			if (desc->key == fd)
	LD	IY,(IX+-3)
	LD	A,(IY+0)
	CP	A,(IX+6)
	JQ	Z,L_204
	INC	(IX+-4)
;  623				break;
;  624		}
L_201:
	LD	A,(IX+-4)
	CP	A,4
	JQ	C,L_199
L_204:
;  625		if (desc == NULL)
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JQ	NZ,L_206
;  626			return false;
	XOR	A,A
	JQ	L_214
L_206:
;  627		if (!desc->write)
	LD	IY,(IX+-3)
	LD	A,(IY+22)
	OR	A,A
	JQ	NZ,L_208
;  628			return false;
	XOR	A,A
	JQ	L_214
L_208:
;  629		if (!desc->current_cluster)
	LD	IY,(IX+-3)
	LD	BC,(IY+10)
	LD	A,(IY+13)
	LD	(IX+-12),BC
	LD	(IX+-9),A
	PUSH	BC
	POP	HL
	LD	E,(IX+-9)
	CALL	__lcmpzero
	JQ	NZ,L_209
;  630			return false;
	XOR	A,A
	JQ	L_214
L_209:
;  631		sector = cluster_to_sector(desc->current_cluster);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	LD	(IX+-5),E
;  632		sector += (desc->fpos >> 9) % fat_state.cluster_size;
	LD	IY,(IX+-3)
	LD	BC,(IY+14)
	LD	A,(IY+17)
	LD	L,9
	CALL	__lshru
	LD	E,A
	OR	A,A
	SBC	HL,HL
	LD	A,(_fat_state+1)
	LD	L,A
	LD	(IX+-24),BC
	PUSH	HL
	POP	BC
	LD	A,H
	LD	HL,(IX+-24)
	CALL	__lremu
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	CALL	__ladd
	LD	(IX+-8),HL
	LD	(IX+-5),E
;  633		write_sector(sector, sector_buff);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  634		desc->fpos += 512;
	LD	IY,(IX+-3)
	LD	HL,(IY+14)
	LD	E,(IY+17)
	LD	BC,512
	XOR	A,A
	CALL	__ladd
	LD	(IY+14),HL
	LD	(IY+17),E
;  635		if (!((desc->fpos >> 9) % fat_state.cluster_size)) {
	LD	BC,(IY+14)
	LD	A,(IY+17)
	LD	L,9
	CALL	__lshru
	LD	E,A
	OR	A,A
	SBC	HL,HL
	LD	A,(_fat_state+1)
	LD	L,A
	LD	(IX+-21),BC
	PUSH	HL
	POP	BC
	LD	A,H
	LD	HL,(IX+-21)
	CALL	__lremu
	CALL	__lcmpzero
	JQ	NZ,L_213
;  636			old_cluster = desc->current_cluster;
	LD	IY,(IX+-3)
	LD	BC,(IY+10)
	LD	A,(IY+13)
	LD	(IX+-16),BC
	LD	(IX+-13),A
;  637			desc->current_cluster = next_cluster(desc->current_cluster);
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	fat.nextcluster
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LD	(IY+10),HL
	LD	(IY+13),E
;  638			if (!desc->current_cluster && desc->write)
	LD	HL,(IY+10)
	LD	E,(IY+13)
	CALL	__lcmpzero
	JQ	NZ,L_213
	LD	IY,(IX+-3)
	LD	A,(IY+22)
	OR	A,A
	JQ	Z,L_213
;  639				desc->current_cluster = alloc_cluster(desc->entry_sector, desc->entry_index, old_cluster);
	LD	C,(IX+-13)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	LD	IY,(IX+-3)
	LD	C,(IY+5)
	LD	B,0
	PUSH	BC
	LD	BC,(IY+1)
	LD	A,(IY+4)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	fat.alloc_cluster
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LD	(IY+10),HL
	LD	(IY+13),E
;  640		}
L_213:
;  641	
;  642		read_sector(desc->entry_sector, sector_buff);
	LD	IY,(IX+-3)
	LD	BC,(IY+1)
	LD	A,(IY+4)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  643		SET32(sector_buff + (desc->entry_index * 32 + 28), desc->fpos);
	LD	IY,(IX+-3)
	LD	A,(IY+5)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	BC,IY+28
	LD	IY,(IX+-3)
	LD	HL,(fat.sectorbuffer)
	LD	DE,(IY+14)
	LD	(IX+-17),A	; spill
	LD	A,(IY+17)
	LD	(IX+-18),A	; spill
	LD	A,(IX+-17)	; unspill
	ADD	HL,BC
	LD	(HL),DE
	INC	HL
	INC	HL
	INC	HL
	LD	(IX+-17),A	; spill
	LD	A,(IX+-18)	; unspill
	LD	(HL),A
;  644		write_sector(desc->entry_sector, sector_buff);
	LD	BC,(IY+1)
	LD	A,(IY+4)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  645		return true;
	LD	A,1
;  646	}
L_214:
	LD	SP,IX
	POP	IX
	RET	

;  650	static bool folder_empty(uint32_t cluster) {
_folder_empty:
	LD	HL,-14
	CALL	__frameset
;  651		unsigned int i, j;
;  652		uint32_t sector;
;  653	
;  654		for (;;) {
L_236:
;  655			sector = cluster_to_sector(cluster);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-11),HL
	LD	(IX+-8),E
;  656			if (!sector)
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	CALL	__lcmpzero
	JQ	NZ,L_234
;  657				return true;
	LD	A,1
	JQ	L_238
L_234:
;  658			for (i = 0; i < fat_state.cluster_size; i++) {
	LD	BC,0
	LD	(IX+-7),BC
	JQ	L_233
L_231:
;  659				read_sector(sector, sector_buff);
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  660				for (j = 0; j < 16; j++) {
	LD	BC,0
	LD	(IX+-4),BC
	JQ	L_228
L_226:
;  661	                                unsigned int j32 = j * 32;
	LD	HL,(IX+-4)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-14),HL
;  662	                                uint8_t val;
;  663					if (sector_buff[j32 + 11] == 0xF)
	LD	IY,(IX+-14)
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,15
	SBC	HL,BC
	JQ	Z,L_227
;  664						continue;
;  665	                                val = sector_buff[j32];
	LD	BC,(IX+-14)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-1),A
;  666					if (val == 0)
	OR	A,A
	JQ	NZ,L_225
;  667						return true;
	LD	A,1
	JQ	L_238
L_225:
;  668					if (val != 0xE5 && val && val != '.' && val != ' ')
	LD	A,(IX+-1)
	CP	A,229
	JQ	Z,L_227
	LD	A,(IX+-1)
	OR	A,A
	JQ	Z,L_227
	LD	A,(IX+-1)
	CP	A,46
	JQ	Z,L_227
	LD	A,(IX+-1)
	CP	A,32
	JQ	Z,L_227
;  669						return false;
	XOR	A,A
	JQ	L_238
;  670				}
L_227:
	LD	BC,(IX+-4)
	INC	BC
	LD	(IX+-4),BC
L_228:
	LD	BC,16
	LD	HL,(IX+-4)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_226
;  671				sector++;
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	LD	A,1
	CALL	__ladd_b
	LD	(IX+-11),HL
	LD	(IX+-8),E
	LD	BC,(IX+-7)
	INC	BC
	LD	(IX+-7),BC
;  672			}
L_233:
	LD	A,(_fat_state+1)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	PUSH	HL
	POP	BC
	LD	HL,(IX+-7)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_231
;  673			cluster = next_cluster(cluster);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	fat.nextcluster
	POP	BC
	POP	BC
	LD	(IX+6),HL
	LD	(IX+9),E
;  674		}
	JQ	L_236
;  675	
;  676		return true;
;  677	}
L_238:
	LD	SP,IX
	POP	IX
	RET	

;  680	bool delete_file(const char *path) {
_delete_file:
	LD	HL,-27
	CALL	__frameset
;  681		uint32_t i;
;  682		unsigned int index, index32;
;  683		uint32_t sector, cluster;
;  684	
;  685		sector = locate_record(path, &index, NULL);
	LD	BC,0
	PUSH	BC
	PEA	IX+-7
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_locate_record
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;  686		if (!sector)
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	CALL	__lcmpzero
	JQ	NZ,L_247
;  687			return false;
	XOR	A,A
	JQ	L_253
L_247:
;  688		for (i = 0; i < MAX_FD_OPEN; i++)
	LD	BC,0
	LD	(IX+-11),BC
	XOR	A,A
	LD	(IX+-8),A
	JQ	L_246
L_244:
;  689			if (fat_fd[i].entry_sector == sector && (int) fat_fd[i].entry_index == index && fat_fd[i].key >= 0)
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	LD	BC,23
	XOR	A,A
	CALL	__lmulu
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-14),HL
	LD	IY,(IX+-14)
	LD	HL,(IY+1)
	LD	E,(IY+4)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__lcmpu
	JQ	NZ,L_245
	LD	IY,(IX+-14)
	LD	A,(IY+5)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-7)
	SBC	HL,BC
	JQ	NZ,L_245
	LD	IY,(IX+-14)
	LD	A,(IY+0)
	OR	A,A
	JP	M,L_245
;  690				return false;
	XOR	A,A
	JQ	L_253
L_245:
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	LD	A,1
	CALL	__ladd_b
	LD	(IX+-11),HL
	LD	(IX+-8),E
L_246:
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	LD	BC,4
	XOR	A,A
	CALL	__lcmpu
	JQ	C,L_244
;  691		read_sector(sector, sector_buff);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  692		index32 = index * 32;
	LD	HL,(IX+-7)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-17),HL
;  693		if (sector_buff[index32 + 11] & 0x10) {
	LD	IY,(IX+-17)
	LEA	IY,IY+11
	LD	(IX+-24),IY
	PUSH	IY
	POP	BC
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-27),HL
	LD	A,(HL)
	AND	A,16
	JQ	Z,L_252
;  694			cluster = GET_ENTRY_CLUSTER(index);
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	fat.getentrycluster
	POP	BC
	LD	(IX+-21),HL
	LD	(IX+-18),E
;  695			if (!folder_empty(cluster))
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_folder_empty
	POP	BC
	POP	BC
	OR	A,A
	JQ	NZ,L_250
;  696				return false;
	XOR	A,A
	JQ	L_253
L_250:
;  697			read_sector(sector, sector_buff);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  698			sector_buff[index32 + 11] = 0;
	LD	BC,(IX+-24)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),0
;  699			sector_buff[index32] = 0xE5;
	LD	BC,(IX+-17)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),229
;  700			write_sector(sector, sector_buff);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  701			dealloc_fat(cluster);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	fat.dealloc
	POP	BC
	POP	BC
;  702			return true;
	LD	A,1
	JQ	L_253
;  703		} else {
L_252:
;  704			sector_buff[index32 + 11] = 0;
	LD	HL,(IX+-27)
	LD	(HL),0
;  705			sector_buff[index32] = 0xE5;
	LD	BC,(IX+-17)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),229
;  706			cluster = GET_ENTRY_CLUSTER(index);
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	fat.getentrycluster
	POP	BC
	LD	(IX+-21),HL
	LD	(IX+-18),E
;  707			write_sector(sector, sector_buff);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  708			dealloc_fat(cluster);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	fat.dealloc
	POP	BC
	POP	BC
;  709			return true;
	LD	A,1
;  710		}
;  711	}
L_253:
	LD	SP,IX
	POP	IX
	RET	

;  714	bool create_file(char *path, char *name, uint8_t attrib) {
_create_file:
	LD	HL,-24
	CALL	__frameset
;  715		uint32_t sector, pcluster, cluster;
;  716		unsigned int index, pindex, index32, i;
;  717		if (!path) {
	LD	HL,(IX+6)
	CALL	__icmpzero
	JQ	NZ,L_257
;  718			if (locate_record(name, &i, NULL))
	LD	BC,0
	PUSH	BC
	PEA	IX+-3
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_locate_record
	POP	BC
	POP	BC
	POP	BC
	CALL	__lcmpzero
	JQ	Z,L_261
;  719				return false;
	XOR	A,A
	JQ	L_287
;  720		} else {
L_257:
;  721			if (locate_record(path, &i, name))
	LD	BC,(IX+9)
	PUSH	BC
	PEA	IX+-3
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_locate_record
	POP	BC
	POP	BC
	POP	BC
	CALL	__lcmpzero
	JQ	Z,L_261
;  722				return false;
	XOR	A,A
	JQ	L_287
;  723		}
L_261:
;  724	
;  725		if (path && *path == '/' && !*(path + 1))
	LD	HL,(IX+6)
	CALL	__icmpzero
	JQ	Z,L_266
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	RLA
	SBC	HL,HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JQ	NZ,L_266
	LD	HL,(IX+6)
	INC	HL
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L_266
;  726			path = NULL;
	LD	BC,0
	LD	(IX+6),BC
L_266:
;  727		if (!path) {
	LD	HL,(IX+6)
	CALL	__icmpzero
	JQ	NZ,L_265
;  728			sector = alloc_entry_root(&index);
	PEA	IX+-13
	CALL	_alloc_entry_root
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  729			pcluster = 0;
	LD	BC,0
	LD	(IX+-20),BC
	XOR	A,A
	LD	(IX+-17),A
;  730		} else {
	JQ	L_268
L_265:
;  731			sector = locate_record(path, &pindex, NULL);
	LD	BC,0
	PUSH	BC
	PEA	IX+-16
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_locate_record
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  732			read_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  733			pcluster = GET_ENTRY_CLUSTER(pindex);
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	fat.getentrycluster
	POP	BC
	LD	(IX+-20),HL
	LD	(IX+-17),E
;  734			if (!sector)
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	CALL	__lcmpzero
	JQ	NZ,L_263
;  735				return false;
	XOR	A,A
	JQ	L_287
L_263:
;  736			read_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  737			sector = alloc_entry(sector, pindex, GET_ENTRY_CLUSTER(pindex), &index);
	PEA	IX+-13
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	fat.getentrycluster
	POP	BC
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	C,(IX+-16)
	PUSH	BC
	LD	C,(IX+-4)
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_alloc_entry
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  738		}
L_268:
;  739	
;  740		if (!sector)
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	CALL	__lcmpzero
	JQ	NZ,L_269
;  741			return false;
	XOR	A,A
	JQ	L_287
L_269:
;  742		read_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  743		index32 = index * 32;
	LD	HL,(IX+-13)
;  744		for (i = 0; i < 32; i++)
	LD	BC,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-10),HL
	LD	(IX+-3),BC
	JQ	L_273
L_271:
;  745			sector_buff[index32 + i] = 0;
	LD	BC,(IX+-3)
	LD	HL,(IX+-10)
	ADD	HL,BC
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_273:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_271
;  746		fname_to_fatname(name, (char *) &sector_buff[index32]);
	LD	BC,(IX+-10)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+9)
	PUSH	BC
	CALL	fat.fname2fatname
	POP	BC
	POP	BC
;  747		sector_buff[index32 + 11] = attrib;
	LD	IY,(IX+-10)
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(IX+12)
	LD	(HL),A
;  748		write_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  749	
;  750		if (attrib & 0x10) {
	LD	A,(IX+12)
	AND	A,16
	JQ	Z,L_286
;  751			pindex = index;
	LD	BC,(IX+-13)
	LD	(IX+-16),BC
;  752			sector = alloc_entry(sector, pindex, 0, &index);
	PEA	IX+-13
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	C,(IX+-16)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-4)
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_alloc_entry
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  753			read_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  754	                index32 = index * 32;
	LD	HL,(IX+-13)
;  755			for (i = 0; i < 11; i++)
	LD	BC,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-10),HL
	LD	(IX+-3),BC
	JQ	L_278
L_276:
;  756				sector_buff[index32 + i] = ' ';
	LD	BC,(IX+-3)
	LD	HL,(IX+-10)
	ADD	HL,BC
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),32
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_278:
	LD	BC,11
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_276
;  757			sector_buff[index32] = '.';
	LD	BC,(IX+-10)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),46
;  758			cluster = sector_to_cluster(sector);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	fat.sector2cluster
	POP	BC
	POP	BC
	LD	(IX+-24),HL
	LD	(IX+-21),E
;  759			SET16(sector_buff + (index32 + 20), cluster >> 16);
	PUSH	HL
	POP	BC
	LD	L,16
	LD	A,(IX+-21)
	CALL	__lshru
	LD	IY,(IX+-10)
	LEA	DE,IY+20
	LD	HL,(fat.sectorbuffer)
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  760			SET16(sector_buff + (index32 + 26), cluster & 0xFFFF);
	LEA	BC,IY+26
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	BC,(IX+-24)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  761			sector_buff[index32 + 11] = 0x10;
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),16
;  762			write_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  763	
;  764			sector = alloc_entry(sector, pindex, cluster, &index);
	PEA	IX+-13
	LD	C,(IX+-21)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	LD	C,(IX+-16)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-4)
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_alloc_entry
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  765			read_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  766	                index32 = index * 32;
	LD	HL,(IX+-13)
;  767			for (i = 0; i < 11; i++)
	LD	BC,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-10),HL
	LD	(IX+-3),BC
	JQ	L_283
L_281:
;  768				sector_buff[index32 + i] = ' ';
	LD	BC,(IX+-3)
	LD	HL,(IX+-10)
	ADD	HL,BC
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),32
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_283:
	LD	BC,11
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_281
;  769			sector_buff[index32] = '.';
	LD	BC,(IX+-10)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),46
;  770			sector_buff[index32 + 1] = '.';
	LD	BC,(IX+-10)
	INC	BC
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),46
;  771			SET16(sector_buff + (index32 + 20), pcluster >> 16);
	LD	BC,(IX+-20)
	LD	A,(IX+-17)
	LD	L,16
	CALL	__lshru
	LD	IY,(IX+-10)
	LEA	DE,IY+20
	LD	HL,(fat.sectorbuffer)
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  772			SET16(sector_buff + (index32 + 26), pcluster & 0xFFFF);
	LEA	BC,IY+26
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	BC,(IX+-20)
	LD	(HL),C
	INC	HL
	LD	(HL),B
;  773			sector_buff[index32 + 11] = 0x10;
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(HL),16
;  774			write_sector(sector, sector_buff);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_WriteSector
	POP	BC
	POP	BC
	POP	BC
;  775		}
L_286:
;  776	
;  777		return true;
	LD	A,1
;  778	}
L_287:
	LD	SP,IX
	POP	IX
	RET	

;  821	int fat_dirlist(const char *path, fat_entry_t *list, uint8_t mask, int size, int skip) {
_fat_dirlist:
	LD	HL,-64
	CALL	__frameset
;  822		uint32_t sector, cluster, found;
;  823		unsigned int index, i, j, k, l;
;  824		bool root = false;
	LD	(IX+-31),0
;  825	
;  826		if (!path);
	LD	HL,(IX+6)
	CALL	__icmpzero
	JQ	NZ,L_326
;  827		else {
	JQ	L_340
;  828			while (*path == '/') path++;
L_327:
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
L_326:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	RLA
	SBC	HL,HL
	LD	L,B
	OR	A,A
	LD	BC,47
	SBC	HL,BC
	JQ	Z,L_327
;  829			if (!*path)
	LD	HL,(IX+6)
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L_340
;  830				path = 0;
	LD	BC,0
	LD	(IX+6),BC
;  831		}
L_340:
;  832		if (!path) {
	LD	HL,(IX+6)
	CALL	__icmpzero
	JQ	NZ,L_339
;  833			sector = fat_state.root_dir_pos;
	LD	BC,(_fat_state+16)
	LD	A,(_fat_state+19)
	LD	(IX+-11),BC
	LD	(IX+-8),A
;  834			root = true;
	LD	(IX+-31),1
;  835		} else {
	JQ	L_341
L_339:
;  836			if (!(sector = locate_record(path, &index, NULL)))
	LD	BC,0
	PUSH	BC
	PEA	IX+-46
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_locate_record
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-11),HL
	LD	(IX+-8),E
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	CALL	__lcmpzero
	JQ	NZ,L_333
;  837				return -1;
	LD	HL,16777215
	JQ	L_389
L_333:
;  838			read_sector(sector, sector_buff);
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  839			if (!(sector_buff[index * 32 + 11] & 0x10))
	LD	HL,(IX+-46)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	POP	IY
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	AND	A,16
	JQ	NZ,L_335
;  840				return -1;
	LD	HL,16777215
	JQ	L_389
L_335:
;  841			cluster = GET_ENTRY_CLUSTER(index);
	LD	BC,(IX+-46)
	PUSH	BC
	CALL	fat.getentrycluster
	POP	BC
	LD	(IX+-15),HL
	LD	(IX+-12),E
;  842			if (fat_state.type != FAT_TYPE_FAT32)
	LD	A,(_fat_state+24)
	CP	A,1
	JQ	Z,L_337
;  843				cluster &= 0xFFFF;
	LD	BC,(IX+-15)
	CALL	__stoiu
	LD	(IX+-15),HL
	XOR	A,A
	LD	(IX+-12),A
L_337:
;  844			sector = cluster_to_sector(cluster);
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-11),HL
	LD	(IX+-8),E
;  845		}
L_341:
;  846	
;  847		found = 0;
	LD	BC,0
	LD	(IX+-7),BC
	XOR	A,A
	LD	(IX+-4),A
;  848		for (;;) {
L_387:
;  849			cluster = sector_to_cluster(sector);
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	CALL	fat.sector2cluster
	POP	BC
	POP	BC
	LD	(IX+-15),HL
	LD	(IX+-12),E
;  850			for (i = 0; i < fat_state.cluster_size; i++) {
	LD	BC,0
	LD	(IX+-21),BC
	JQ	L_380
L_378:
;  851				read_sector(sector + i, sector_buff);
	LD	BC,(IX+-21)
	XOR	A,A
	LD	HL,(IX+-11)
	LD	E,(IX+-8)
	CALL	__ladd
	LD	C,E
	LD	B,0
	PUSH	BC
	PUSH	HL
	LD	BC,(fat.sectorbuffer)
	PUSH	BC
	CALL	_fat_ReadSector
	POP	BC
	POP	BC
	POP	BC
;  852				for (j = 0; j < 16; j++) {
	LD	BC,0
	LD	(IX+-24),BC
	JQ	L_377
L_375:
;  853					if (found >= (uint32_t) size)
	LD	BC,(IX+15)
	CALL	__itol
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	CALL	__lcmpu
	JQ	C,L_346
;  854						return found;
	LD	HL,(IX+-7)
	JQ	L_389
L_346:
;  855					if (sector_buff[j * 32 + 11] == 0xF)
	LD	HL,(IX+-24)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+-30),HL
	LD	IY,(IX+-30)
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,15
	SBC	HL,BC
	JQ	Z,L_376
;  856						continue;
;  857					if (sector_buff[j * 32] == 0xE5)
	LD	BC,(IX+-30)
	LD	(IX+-49),BC
	LD	BC,(IX+-30)
	LD	(IX+-40),BC
	LD	BC,(IX+-30)
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-52),HL
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,229
	SBC	HL,BC
	JQ	Z,L_376
;  858						continue;
;  859					if (!sector_buff[j * 32])
	LD	HL,(IX+-52)
	LD	A,(HL)
	OR	A,A
	JQ	NZ,L_353
;  860						return found;
	LD	HL,(IX+-7)
	JQ	L_389
L_353:
;  861					if (skip) {
	LD	HL,(IX+18)
	CALL	__icmpzero
	JQ	Z,L_360
;  862						skip--;
	LD	BC,(IX+18)
	DEC	BC
	LD	(IX+18),BC
;  863						continue;
	JQ	L_376
;  864					}
L_360:
;  865	
;  866					for (k = 0; k < 8; k++) {
	LD	BC,0
	LD	(IX+-3),BC
	JQ	L_359
L_357:
;  867						if (sector_buff[j * 32 + k] == ' ')
	LD	BC,(IX+-49)
	LD	(IX+-27),BC
	LD	(IX+-40),BC
	LD	BC,(IX+-27)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	JQ	Z,L_363
;  868							break;
;  869						list[found].filename[k] = sector_buff[j * 32 + k];
	LD	BC,(IX+-27)
	LD	(IX+-49),BC
	LD	BC,(IX+-27)
	LD	(IX+-40),BC
	LD	BC,(IX+-27)
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-58),HL	; spill
	LD	(IX+-64),HL	; spill
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,16
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	POP	IY
	LEA	HL,IY+0
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-58),HL	; spill
	LD	HL,(IX+-64)	; unspill
	LD	A,(HL)
	LD	HL,(IX+-58)	; unspill
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  870					}
L_359:
	LD	BC,8
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_357
L_363:
;  871	
;  872					if (sector_buff[j * 32 + 8] != ' ') {
	LD	BC,(IX+-40)
	LD	(IX+-43),BC
	LD	IY,(IX+-43)
	LEA	IY,IY+8
	LD	(IX+-34),IY
	PUSH	IY
	POP	BC
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	JQ	Z,L_371
;  873						list[found].filename[k] = '.';
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,16
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	BC,(IX+-3)
	PUSH	HL
	POP	IY
	LEA	HL,IY+0
	ADD	HL,BC
	LD	(HL),46
;  874						k++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  875					}
L_371:
;  876	
;  877					for (l = 0; l < 3; k++, l++) {
	LD	BC,0
	LD	(IX+-18),BC
	JQ	L_370
L_368:
;  878						if (sector_buff[j * 32 + 8 + l] == ' ')
	LD	BC,(IX+-34)
	LD	(IX+-37),BC
	LD	HL,(IX+-18)
	ADD	HL,BC
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	OR	A,A
	LD	BC,32
	SBC	HL,BC
	JQ	Z,L_372
;  879							break;
;  880						list[found].filename[k] = sector_buff[j * 32 + 8 + l];
	LD	BC,(IX+-37)
	LD	(IX+-34),BC
	LD	BC,(IX+-37)
	LD	HL,(IX+-18)
	ADD	HL,BC
	LD	BC,(fat.sectorbuffer)
	ADD	HL,BC
	LD	(IX+-58),HL	; spill
	LD	(IX+-61),HL	; spill
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,16
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	POP	IY
	LEA	HL,IY+0
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-58),HL	; spill
	LD	HL,(IX+-61)	; unspill
	LD	A,(HL)
	LD	HL,(IX+-58)	; unspill
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
;  881					}
L_370:
	LD	BC,3
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_368
L_372:
;  882	
;  883					list[found].filename[k] = 0;
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,16
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	POP	IY
	LEA	HL,IY+0
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),0
;  884	
;  885					list[found].attrib = sector_buff[j * 32 + 11];
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	BC,16
	XOR	A,A
	CALL	__lmulu
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	(IX+-55),HL
	LD	IY,(IX+-43)
	LEA	BC,IY+11
	LD	HL,(fat.sectorbuffer)
	ADD	HL,BC
	LD	A,(HL)
	LD	IY,(IX+-55)
	LD	(IY+13),A
;  886	
;  887	                if (directories && list[found].attrib & FAT_DIR)
	LD	A,(IX+12)
	OR	A,A
	LD	A,(IY+13)
	JQ	Z,L_ONLY_FILES
	AND	A,16
	JQ	NZ,L_FOUND
	JQ	L_376
L_ONLY_FILES:
	AND	A,24
	JQ	NZ,L_376
;  888	                {
;  889					    found++;
L_FOUND:
	LD	HL,(IX+-7)
	LD	E,(IX+-4)
	LD	A,1
	CALL	__ladd_b
	LD	(IX+-7),HL
	LD	(IX+-4),E
;  890	                }
;  891				}
L_376:
	LD	BC,(IX+-24)
	INC	BC
	LD	(IX+-24),BC
L_377:
	LD	BC,16
	LD	HL,(IX+-24)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_375
	LD	BC,(IX+-21)
	INC	BC
	LD	(IX+-21),BC
;  892	
;  893			}
L_380:
	LD	A,(_fat_state+1)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	PUSH	HL
	POP	BC
	LD	HL,(IX+-21)
	OR	A,A
	SBC	HL,BC
	JQ	C,L_378
;  894	
;  895			if (root && fat_state.type == FAT_TYPE_FAT16) {
	LD	A,(IX+-31)
	OR	A,A
	JQ	Z,L_385
	LD	A,(_fat_state+24)
	OR	A,A
	JQ	NZ,L_385
;  896				sector += fat_state.cluster_size;
	OR	A,A
	SBC	HL,HL
	LD	A,(_fat_state+1)
	LD	L,A
	LD	A,(IX+-8)
	LD	E,H
	LD	BC,(IX+-11)
	CALL	__ladd
	LD	(IX+-11),HL
	LD	(IX+-8),E
;  897			} else {
	JQ	L_387
L_385:
;  898				if (!(cluster = next_cluster(cluster)))
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	fat.nextcluster
	POP	BC
	POP	BC
	LD	(IX+-15),HL
	LD	(IX+-12),E
	LD	HL,(IX+-15)
	LD	E,(IX+-12)
	CALL	__lcmpzero
	JQ	NZ,L_383
;  899					return found;
	LD	HL,(IX+-7)
	JQ	L_389
L_383:
;  900				sector = cluster_to_sector(cluster);
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	fat.cluster2sector
	POP	BC
	POP	BC
	LD	(IX+-11),HL
	LD	(IX+-8),E
;  901			}
;  902		}
	JQ	L_387
;  903	}
L_389:
	LD	SP,IX
	POP	IX
	RET

;  904	
;  905	bool fat_seek(int fd, uint32_t pos) {
_fat_seek:
	LD	HL,-44
	CALL	__frameset
;  906	    uint8_t i;
;  907	    uint32_t current_cluster_index, target_cluster_index, current_cluster, old_cluster;
;  908	
;  909		if (fd < 0)
	LD	A,(IX+6)
	OR	A,A
	JP	P,L_396
;  910			return false;
	XOR	A,A
	JQ	L_417
L_396:
;  911		for (i = 0; i < MAX_FD_OPEN; i++)
	LD	(IX+-4),0
	JQ	L_395
L_393:
;  912			if (fat_fd[i].key == fd)
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	LD	A,23
	CALL	__imul_b
	LD	BC,_fat_fd
	ADD	HL,BC
	PUSH	HL
	POP	IY
	LD	A,(IY+0)
	LD	B,(IX+6)
	CP	A,B
	JQ	Z,L_400
	INC	(IX+-4)
;  913				break;
L_395:
	LD	A,(IX+-4)
	CP	A,4
	JQ	C,L_393
L_398:
;  914		if (i == MAX_FD_OPEN)
	LD	A,(IX+-4)
	CP	A,4
	JQ	NZ,L_400
;  915			return false;
	XOR	A,A
	JQ	L_417
L_400:
;  916		if (!fat_fd[i].current_cluster)
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	LD	A,23
	CALL	__imul_b
	LD	(IX+-15),HL
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-3),HL
	LD	IY,(IX+-3)
	LD	HL,(IY+10)
	LD	E,(IY+13)
	CALL	__lcmpzero
	JQ	NZ,L_403
;  917			return false;
	XOR	A,A
	JQ	L_417
L_403:
;  918		if (pos >= fat_fd[i].file_size && !fat_fd[i].write)
	LD	BC,(IX+-3)
	LD	(IX+-21),BC
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	HL,(IX+9)
	LD	E,(IX+12)
	LD	IY,(IX+-3)
	LD	BC,(IY+18)
	LD	A,(IY+21)
	CALL	__lcmpu
	JQ	C,L_404
	LD	BC,(IX+-3)
	LD	(IX+-21),BC
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	IY,(IX+-3)
	LD	A,(IY+22)
	OR	A,A
	JQ	NZ,L_404
;  919			pos = fat_fd[i].file_size & (~0x1FF);
	LD	BC,(IX+-3)
	LD	(IX+-21),BC
	LD	BC,(IX+-3)
	LD	(IX+-18),BC
	LD	IY,(IX+-3)
	LD	HL,(IY+18)
	LD	E,(IY+21)
	LD	BC,16776704
	LD	A,255
	CALL	__land
	LD	(IX+9),HL
	LD	(IX+12),E
L_404:
;  920		target_cluster_index = (pos >> 9) / fat_state.cluster_size;
	LD	BC,(IX+9)
	LD	A,(IX+12)
	LD	L,9
	CALL	__lshru
	LD	E,A
	OR	A,A
	SBC	HL,HL
	LD	A,(_fat_state+1)
	LD	L,A
	LD	(IX+-41),BC
	PUSH	HL
	POP	BC
	LD	A,H
	LD	HL,(IX+-41)
	CALL	__ldivu
	LD	(IX+-25),HL
	LD	(IX+-22),E
;  921		current_cluster_index = (fat_fd[i].fpos >> 9) / fat_state.cluster_size;
	LD	HL,(IX+-15)
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-32),HL
	LD	IY,(IX+-32)
	LD	BC,(IY+14)
	LD	A,(IY+17)
	LD	L,9
	CALL	__lshru
	LD	E,A
	OR	A,A
	SBC	HL,HL
	LD	A,(_fat_state+1)
	LD	L,A
	LD	(IX+-44),BC
	PUSH	HL
	POP	BC
	LD	A,H
	LD	HL,(IX+-44)
	CALL	__ldivu
	LD	(IX+-12),HL
	LD	(IX+-9),E
;  922		current_cluster = fat_fd[i].current_cluster;
	LD	BC,(IY+10)
	LD	A,(IY+13)
	LD	(IX+-8),BC
	LD	(IX+-5),A
;  923	
;  924		if (current_cluster_index == target_cluster_index) {
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,(IX+-25)
	LD	A,(IX+-22)
	CALL	__lcmpu
	JQ	NZ,L_407
;  925			fat_fd[i].fpos = pos;
	LD	BC,(IX+9)
	LD	A,(IX+12)
	LD	IY,(IX+-21)
	LD	(IY+14),BC
	LD	(IY+17),A
;  926			return true;
	LD	A,1
	JQ	L_417
;  927		}
L_407:
;  928		
;  929		if (current_cluster_index > target_cluster_index)
	LD	HL,(IX+-25)
	LD	E,(IX+-22)
	LD	BC,(IX+-12)
	LD	A,(IX+-9)
	CALL	__lcmpu
	JQ	NC,L_414
;  930			current_cluster_index = 0, current_cluster = fat_fd[i].first_cluster;
	LD	BC,0
	LD	(IX+-12),BC
	XOR	A,A
	LD	(IX+-9),A
	LD	IY,(IX+-18)
	LD	BC,(IY+6)
	LD	A,(IY+9)
	LD	(IX+-8),BC
	LD	(IX+-5),A
;  931		
;  932		for (; current_cluster_index < target_cluster_index; current_cluster_index++) {
	JQ	L_414
L_412:
;  933			old_cluster = current_cluster;
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	LD	(IX+-29),BC
	LD	(IX+-26),A
;  934			if (!(current_cluster = next_cluster(current_cluster)))
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-8)
	PUSH	BC
	CALL	fat.nextcluster
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	LD	(IX+-5),E
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	CALL	__lcmpzero
	JQ	NZ,L_411
;  935				current_cluster = alloc_cluster(fat_fd[i].entry_sector, fat_fd[i].entry_index, old_cluster);
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	LD	A,23
	CALL	__imul_b
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-35),HL
	LD	C,(IX+-26)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	LD	IY,(IX+-35)
	LD	C,(IY+5)
	LD	B,0
	PUSH	BC
	LD	BC,(IY+1)
	LD	A,(IY+4)
	LD	H,0
	LD	L,A
	PUSH	HL
	PUSH	BC
	CALL	fat.alloc_cluster
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-8),HL
	LD	(IX+-5),E
L_411:
;  936			if (!current_cluster)
	LD	HL,(IX+-8)
	LD	E,(IX+-5)
	CALL	__lcmpzero
	JQ	NZ,L_413
;  937				return false;
	XOR	A,A
	JQ	L_417
;  938		}
L_413:
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	A,1
	CALL	__ladd_b
	LD	(IX+-12),HL
	LD	(IX+-9),E
L_414:
	LD	HL,(IX+-12)
	LD	E,(IX+-9)
	LD	BC,(IX+-25)
	LD	A,(IX+-22)
	CALL	__lcmpu
	JQ	C,L_412
;  939	
;  940		fat_fd[i].current_cluster = current_cluster;
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	L,A
	LD	A,23
	CALL	__imul_b
	LD	BC,_fat_fd
	ADD	HL,BC
	LD	(IX+-38),HL
	LD	BC,(IX+-8)
	LD	A,(IX+-5)
	LD	IY,(IX+-38)
	LD	(IY+10),BC
	LD	(IY+13),A
;  941		fat_fd[i].fpos = pos;
	LD	DE,(IX+9)
	LD	B,(IX+12)
;  942		return true;
	LD	A,1
	LD	(IY+14),DE
	LD	(IY+17),B
;  943	}
L_417:
	LD	SP,IX
	POP	IX
	RET	


