	assume	adl=1

	section	.text
;;; struct u32div_t {
;;;	 uint32_t rem;
;;;	 uint32_t quot;
;;; };
;;; u32div_t _ldvrmu(uint32_t dividend, uint32_t divisor) {
	public	__ldvrmu

if PREFER_OS_CRT

__ldvrmu := 0001BCh

else

__ldvrmu:
if 1
; I: EUHL=dividend, AUBC=divisor
; O: a[uhl']=EUHL%AUBC, bcu=0, b=A, c=?, euhl=EUHL/AUBC, eubc'=AUBC, zf=!IEF2

;;;	 u32div_t result;
;;;	 result.quot = dividend;
					; euhl : result.quot

	push	bc

	ld	c, a			; c = A
	ld	a, i			; a = I
					; pf = IEF2
	di

	ld	a, c			; a = A
	exx
	pop	bc
	ld	e, a			; eubc' : divisor

	push	af

;;;	 result.rem = 0;
	xor	a, a
	sbc	hl, hl			; auhl' : result.rem

;;;	 int i = 32;
	exx
	ld	b, 32			; b : i

;;;	 do {
.loop:

;;;		 bool dividendBit = result.quot >> 31;
;;;		 result.quot <<= 1;
	add	hl, hl
	rl	e
;;;		 result.rem = (result.rem << 1) + dividendBit;
	exx
	adc	hl, hl
	adc	a, a

;;;		 bool quotBit = result.rem >= divisor;
;;;		 result.rem -= divisor;
	sbc	hl, bc
	sbc	a, e

;;;		 if (!quotBit) {
	jr	nc, .restore_skip
;;;			 result.rem += divisor;
	add	hl, bc
	adc	a, e
;;;		 }
.restore_skip:

;;;		 if (quotBit) {
	exx
	jr	c, .1_skip
;;;			 result.quot++;
	inc	l
;;;		 }
.1_skip:

;;;	 } while (--i != 0);
	djnz	.loop

;;;	 return result;
	pop	bc
	bit	2, c
	ret
;;; }

else
; I: EUHL=dividend, AUBC=divisor
; O: auhl=EUHL%AUBC, euix=EUHL/AUBC, iyh=A, iyl=0

	push	hl
	pop	ix			; euix = dividend

	ld	iyh, a			; [iyh]ubc = divisor

	xor	a, a
	sbc	hl, hl			; auhl = remainder

	ld	iyl, 32

.loop:
	add	ix, ix
	rl	e
	adc	hl, hl
	rla

	sbc	hl, bc
	sbc	a, iyh
	inc	ixl

	jr	nc, .restore_skip
	add	hl, bc
	adc	a, iyh
	dec	ixl
.restore_skip:

	dec	iyl
	jr	nz, .loop

	ret

end if

end if
