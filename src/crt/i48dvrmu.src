; Performs 48 bit division and modulo
; 
; Arguments:
; ude = Most significant bytes of arg 1 (numerator)
; uhl = Least significant bytes of arg 1
; uiy = Most signficant bytes of arg 2 (denominator)
; ubc = Least significant bytes of arg 2
; 
; Returns (loaded into other registers by i48divu/s and i48remu/s):
; ude:uhl quotient, uiy:ubc remainder

    assume adl=1

    section .data

    section .text
    public __i48dvrmu

__i48dvrmu:
    ;backup af
    push af

    push ix
    ld ix, 0
    add ix, sp
    ;backup interrupt
    ld a, i ; P = IEF2
    di
    push af

    exx
    ld hl, 0
    exx

    push de
    push hl

    ;Stack Use:
    ; ix-1 : 0
    ; ix-2 : a interrupt stuff
    ; ix-3 : f interrupt stuff
    ; ix-4 : deu n[5]
    ; ix-5 : d   n[4]
    ; ix-6 : e   n[3]
    ; ix-7 : hlu n[2]
    ; ix-8 : h   n[1]
    ; ix-9 : l   n[0]
    
    ; Set up for c quotient, uhl':uhl remainder, and ude':ude denom

    ; ude = low denom
    ld de, 0
    ex de, hl
    add hl, bc
    ex de, hl
    
    exx
    lea de, iy+0 ; ude' = iy = high denom
    exx

    ld bc, $000600 ; b = byte counter
    ld iy, 0
    ld hl, 0
.byteLoop:
    exx
    ld b, 8 ; b' = bit counter
    ld a, (ix-4); a = relevant numerator byte
.bitLoop:
    exx ; loop entered with alt registers as b' is bit counter, exx here to not be in alt
    sla c ; q<<1
    ; r<<1 and r[0] = n[b]
    rla ; c = n[b]
    adc hl, hl ; low r += low r + n[b]
    exx
    adc hl, hl ; high r += high r + c from low r
    exx
    ; r - d
    sbc hl, de ; low r -= low d
    exx
    sbc hl, de ; high r -= high d
    exx
    jr nc, .greaterEqual
    ; restore if r<d
    add hl, de ; restore low
    exx
    adc hl, de ; restore high
    djnz .bitLoop
    jr .postBit
.greaterEqual:
    ; keep r -= d, and update quotient
    inc c
    exx
    djnz .bitLoop
.postBit:
    exx
    ld (ix-4), c ; now that numerator byte isn't needed, overwrite with quotient
    dec ix
    djnz .byteLoop

    ;finish and clean up

    ; iy = remainder high
    ld iy, 0
    exx
    ex de, hl
    add iy, de
    exx

    ; bc = remainder low
    push hl
    pop bc

    pop hl ; hl = lower quotient
    pop de ; de = upper quotient

    pop af
    jp po, .skipEI
    ei
.skipEI:
    pop ix
    pop af
    ret