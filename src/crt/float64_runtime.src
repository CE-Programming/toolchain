	assume	adl=1

if 1

; reduces binary size by directly calling SoftFloat functions

;-------------------------------------------------------------------------------
; Addition and Subtraction
;-------------------------------------------------------------------------------

	section	.text
	public	__dadd, __dsub

; float64_t softfloat_addMagsF64(float64_t x, const float64_t *y, bool sign_x)
__dadd:
	push	af
	ld	a, b
	jr	__daddsub

; float64_t softfloat_subMagsF64(float64_t x, const float64_t *y, bool sign_x)
__dsub:
	push	af
	ld	a, b
	cpl
	jr	__daddsub

__daddsub:
	push	iy
	ld	iy, 9
	add	iy, sp

	rlc	b
	push	af	; sign_x
	rrc	b

	push	iy	; address of y
	push	bc, de, hl	; pass x by value

	xor a, (iy + 7)
	rla

	jr	nc, .__daddmags	; same signs
; .__dsubmags:
	call	_softfloat_subMagsF64
	jr	.__daddsub_ret
.__daddmags:
	call	_softfloat_addMagsF64
.__daddsub_ret:
	pop	af, af, af, af, af
	pop	iy, af
	ret

extern	_softfloat_addMagsF64, _softfloat_subMagsF64

;-------------------------------------------------------------------------------
; Other Arithmetic
;-------------------------------------------------------------------------------

	section	.text
	public	__dmul

; float64_t f64_mul(float64_t, const float64_t*)
__dmul:
	push	af, iy
	ld	iy, 9
	add	iy, sp
	push	iy, bc, de, hl
	call	_f64_mul
	pop	af, af, af, af, iy, af
	ret

	extern	_f64_mul

;-------------------------------------------------------------------------------

	section	.text
	public	__ddiv

; float64_t f64_div(float64_t, const float64_t*)
__ddiv:
	push	af, iy
	ld	iy, 9
	add	iy, sp
	push	iy, bc, de, hl
	call	_f64_div
	pop	af, af, af, af, iy, af
	ret

	extern	_f64_div

;-------------------------------------------------------------------------------

	section	.text
	public	__drem

; float64_t f64_rem(float64_t, const float64_t*)
__drem:
	push	af, iy
	ld	iy, 9
	add	iy, sp
	push	iy, bc, de, hl
	call	_f64_rem
	pop	af, af, af, af, iy, af
	ret

	extern  _f64_rem

;-------------------------------------------------------------------------------
; Conversion
;-------------------------------------------------------------------------------

	section	.text
	public	__dtof

__dtof:
	; f64_ret_f32
	push	af, iy, bc, de, hl
	call	_f64_to_f32
	pop	af, af, af, iy, af
	ret

	extern	_f64_to_f32

;-------------------------------------------------------------------------------

	section	.text
	public	__lltod

__lltod:
	; i64_ret_f64
	push	af, iy, bc, de, hl
	call	_i64_to_f64
	pop	af, af, af, iy, af
	ret

	extern	_i64_to_f64

;-------------------------------------------------------------------------------

	section	.text
	public	__ulltod

__ulltod:
	; u64_ret_f64
	push	af, iy, bc, de, hl
	call	_ui64_to_f64
	pop	af, af, af, iy, af
	ret

	extern	_ui64_to_f64

else

; ; wraps C functions

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__dadd

; __dadd:
	; ; f64_f64*_ret_f64
	; push	af, iy
	; ld	iy, 9
	; add	iy, sp
	; push	iy, bc, de, hl
	; call	__dadd_c
	; pop	af, af, af, af, iy, af
	; ret
	
	; extern	__dadd_c

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__dsub

; __dsub:
	; ; f64_f64*_ret_f64
	; push	af, iy
	; ld	iy, 9
	; add	iy, sp
	; push	iy, bc, de, hl
	; call	__dsub_c
	; pop	af, af, af, af, iy, af
	; ret
	
	; extern	__dsub_c

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__dmul

; __dmul:
	; ; f64_f64*_ret_f64
	; push	af, iy
	; ld	iy, 9
	; add	iy, sp
	; push	iy, bc, de, hl
	; call	__dmul_c
	; pop	af, af, af, af, iy, af
	; ret
	
	; extern	__dmul_c

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__ddiv

; __ddiv:
	; ; f64_f64*_ret_f64
	; push	af, iy
	; ld	iy, 9
	; add	iy, sp
	; push	iy, bc, de, hl
	; call	__ddiv_c
	; pop	af, af, af, af, iy, af
	; ret
	
	; extern	__ddiv_c

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__drem

; __drem:
	; ; f64_f64*_ret_f64
	; push	af, iy
	; ld	iy, 9
	; add	iy, sp
	; push	iy, bc, de, hl
	; call	__drem_c
	; pop	af, af, af, af, iy, af
	; ret

	; extern	__drem_c

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__dtof

; __dtof:
	; ; f64_ret_f32
	; push	af, iy, bc, de, hl
	; call	__dtof_c
	; pop	af, af, af, iy, af
	; ret
	
	; extern	__dtof_c,

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__lltod

; __lltod:
	; ; i64_ret_f64
	; push	af, iy, bc, de, hl
	; call	__lltod_c
	; pop	af, af, af, iy, af
	; ret
	
	; extern	__lltod_c

; ;-------------------------------------------------------------------------------

	; section	.text
	; public	__ulltod

; __ulltod:
	; ; u64_ret_f64
	; push	af, iy, bc, de, hl
	; call	__ulltod_c
	; pop	af, af, af, iy, af
	; ret

	; extern	__ulltod_c

end if
