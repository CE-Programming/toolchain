	assume	adl=1

	section	.text

if 0
;	public	__utod, __itod

; __utod:
;	; u24_ret_f64
;	ld	e, 0
__ultod:
	; u32_ret_f64
	ld	d, a
.ultod_skip:
	push	iy, de, hl
	call	__ultod_c
	pop	af, af, iy
	ret

; __itod:
;	; i24_ret_f64
;	ld	d, a
;	push	hl
;	add	hl, hl
;	sbc	a, a
;	ld	e, a
;	pop	hl
;	jr	__ltod.ltod_skip

__ltod:
	; i32_ret_f64
	ld	d, a
	bit	7, e
.ltod_skip:
	jr	z, __ultod.ultod_skip	; positive argument
	; return -_ultod_c(labs(x))
	call	__lneg
	push	iy, de, hl
	call	__ultod_c
	set	7, b	; negative result
	pop	af, af, iy
	ret
	
	extern	__ultod_c

end if

	public	__itod
__itod:
	push	hl
	add	hl, hl
	pop	hl
	push	af
	ld	e, 0
	call	c, __ineg
	jr	__ltod.hijack

	section	.text

	public	__utod
__utod:
	ld	e, 0

	require	__ultod

	section	.text

	public	__ultod
__ultod:
	or	a, a
	push	af
	jr	__ltod.hijack

	section	.text

	public	__ltod
__ltod:
	rlc	e
	push	af
	rrc	e
	call	c, __lneg

	require	__ltod.hijack

	section	.text

	private	__ltod.hijack
__ltod.hijack:
	call	__lctlz
	cp	a, 32
	jr	z, .zero
	; clears the MSB since the float will be normalized
	; x <<= clz_result + 1; /* shift by 32 is UB */
if 0
	; calculate the exponent
	push	hl
	; 1023 + 31 = 1054 = 0x41E
	inc.s	bc
	or	a, a
	ld	b, a	; <<= 8
	ld	hl, $041E00
	ld	c, l	; ld c, 0
	sbc	hl, bc
	ld	l, e	; (expon16 << (16 + 24)) | (mant48)
	ex	de, hl
	pop	hl

	ld	b, a
	inc	b
	ld	a, e
.loop32:	; shift by 32 is not UB here!
	add	hl, hl
	rla
	djnz	.loop32
	ld	e, a
else
	; calculate the exponent
	push	hl
	; 1023 + 31 = 1054 = 0x41E
	inc.s	bc
	or	a, a
	ld	b, a	; <<= 8
	ld	hl, $041E00
	ld	c, l	; ld c, 0
	sbc	hl, bc
	ld	l, e	; (expon16 << (16 + 24)) | (mant48)
	ex	de, hl

	pop	bc
	ld	l, a
	ld	a, e
	call	__lshl
	push	bc
	pop	hl
	; shift by 32 is UB
	add	hl, hl
	rla
	ld	e, a
end if

	; UDE:D has expon, E:UHL has mant
	; Float64_mant_bits - uint48_bits = 4
	ld	c, 16 + 4
	push	bc
	call	__llshl
	pop	af	; reset SP
.finish:
	pop	af
	ret	nc	; positive
	set	7, b
	ret	; negative

.zero:
	sbc	hl, hl
	ex	de, hl
	sbc	hl, hl
	ld	b, e
	ld	c, e
	pop	af
	ret

	extern	__lneg
	extern	__lctlz
	extern	__lshl
	extern	__llshl
