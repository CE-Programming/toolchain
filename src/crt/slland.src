; Performs 48 bit ("short long long") bitwise and
; 
; Arguments:
; uiy = Most significant bytes of arg 1
; ubc = Least significant bytes of arg 1
; ude = Most signficant bytes of arg 2
; uhl = Least significant bytes of arg 2
; 
; Returns:
; ude:uhl = ude:uhl & uiy:ubc

	assume	adl=1

	section	.text
	public	__slland
__slland:
	push af

	; Set up stack  stuff for later

	push ix
	ld ix, 0
	add ix, sp

	; Low and high

	ld a, d
	and a, iyh
	ld d, a

	ld a, e
	and a, iyl
	ld e, a
    
	ld a, h
	and a, b
	ld h, a

	ld a, l
	and a, c
	ld l, a

	; Push 2/3 done values
	push de
	push hl
	push iy
	push bc

	; Deal with Upper Byte

	ld a, (ix-1) ; a = u[de] (modified)
	and a, (ix-7) ; a &= u[iy]
	ld (ix-1), a ; u[de] (modified) = a

	ld a, (ix-4) ; a = u[hl] (modified)
	and a, (ix-10) ; a &= u[bc]
	ld (ix-4), a ; u[hl] (modified) = a

	; Load values back into registers and clean up stack
	pop bc
	pop iy
	pop hl
	pop de

	pop ix
	pop af

	ret
