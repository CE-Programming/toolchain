	assume	adl=1

	section	.text

	public __ftod

; input E:UHL (float)
; ouput BC:UDE:UHL (long double)
; NaN payloads are bitshifted
__ftod:
	sla	e	; extract signbit
	push	af
	srl	e
	; signbit and carry are cleared

	ld	a, e
	ld	b, $03	; ld bc, $380 - 1
	
	adc	hl, hl
	jr	z, .mant_zero	; zero inf or normal
	adc	a, a
	jr	z, .subnormal
	inc	a
	jr	z, .nan	
.normal:
	; (Float64_bias - Float32_bias) - 1 (undoing inc a)
	; (Float64_bias - Float32_bias) = $0380
	add	a, $80 - 1	; this can be changed to adc if needed
.subnorm_shift:
	; Same as ld c, a \ ld a, 0 \ adc a, b
	ld	c, a
	adc	a, b
	sub	a, c
; HL = mant
; C = lo expon
; A = hi expon
.shift_28: ; Float64_mant_bits - Float32_mant_bits
	inc	b	; ld b, 4
.loop:
	add	hl, hl
	rl	c
	rla
	djnz	.loop
.zero:	; <-- A is zero on this path
	ld	b, a

	; zero low bits
.infinite:
;	or	a, a	; not needed
	; f64_mant_bits - f32_mant_bits = lowest 29 bits will be zero
	ex	de, hl
	sbc	hl, hl
.finish:
	pop	af
	ret	nc	; positive
	set	7, b
	ret	; negative

.mant_zero:
	adc	a, a
	ld	c, l	; HL is zero here
	jr	z, .zero
	inc	a
	jr	nz, .normal
	; infinite
	ld	c, $F0
	ld	b, e	; ld b, $7F since infinity is all ones
	jr	.infinite

.subnormal:
	; since this is subnormal, the LSB of the exponent is already zero
	call	__ictlz
	ld	c, a
	; shift until the MSB of the mantissa is the LSB of the exponent
	call	__ishl
	; (Float64_bias - Float32_bias) = $0380
	; expon = (Float64_bias - Float32_bias) - clz_result
	add	hl, hl
	; the following three methods are equivilient
if 1
	; ($FF - a) - $7F
	cpl
	sub	a, $80 - 1
else if 0
	; $FF - (a + $7F)
	add	a, $80 - 1
	cpl
else
	; $80 - c (c is equal to a)
	ld	a, $80
	sub	a, c
end if
	jr	.subnorm_shift

.nan:
	ld	a, $07
	ld	c, $FF
	jr	.shift_28

	extern	__ictlz
	extern	__ishl