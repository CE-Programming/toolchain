; Performs 48 bit bitwise and
; 
; Arguments:
; uiy = Most significant bytes of arg 1
; ubc = Least significant bytes of arg 1
; ude = Most signficant bytes of arg 2
; uhl = Least significant bytes of arg 2
; 
; Returns:
; ude:uhl = ude:uhl & uiy:ubc

	assume	adl=1

	section	.text
	public	__i48and
__i48and:
	push af

	; Low and high

	ld a, d
	and a, iyh
	ld d, a

	ld a, e
	and a, iyl
	ld e, a
    
	ld a, h
	and a, b
	ld h, a

	ld a, l
	and a, c
	ld l, a

	; Push 2/3 done values
	push iy
	ld iy, 0
	add iy, sp
	push de
	push hl
	push bc

	; -1 : iyu
	; -2 : iyh
	; -3 : iyl = iy
	; -4 : ude
	; -5 : d
	; -6 : e
	; -7 : uhl
	; -8 : h
	; -9 : l
	;-10 : ubc
	;-11 : b
	;-12 : c

	; Deal with Upper Byte

	ld a, (iy-1) ; a = u[de] (modified)
	and a, (iy+2) ; a &= u[iy]
	ld (iy-1), a ; u[de] (modified) = a

	ld a, (iy-4) ; a = u[hl] (modified)
	and a, (iy-7) ; a &= u[bc]
	ld (iy-4), a ; u[hl] (modified) = a

	; Load values back into registers and clean up stack
	pop bc
	pop hl
	pop de
	pop iy

	pop af

	ret
