	assume	adl=1

	section	.text
	public	_ldexpf
	public	_ldexp
	; when FLT_RADIX == 2, scalbn is equivilent to ldexp
	public	_scalbnf
	public	_scalbn

if PREFER_OS_LIBC

_ldexpf := 0220DCh
_ldexp := _ldexpf
_scalbnf := _ldexpf
_scalbn := _ldexpf

else

if 1

; NOTE: since Ti floats are used, negative zero will not be returned unless the
; input was negative zero.
;
; normal inputs are handled correctly, unless the output is subnormal
; subnormal inputs/outputs return zero and set ERANGE and FE_INEXACT
; zero/infinite/NaN inputs are handled correctly
_ldexpf:
_ldexp:
_scalbnf:
_scalbn:
	ld	iy, 0
	lea	bc, iy + 0
	add	iy, sp
	ld	hl, (iy + 3)	; mant
	add	hl, hl
	ld	a, (iy + 6)	; expon
	adc	a, a
	jr	z, .maybe_subnormal
	inc	a
	jr	z, .ret_self	; inf NaN
	dec	a
	ex	de, hl
	ld	hl, (iy + 9)	; scale
	ld	c, a
	add	hl, bc	; add expon
	ld	a, l
	bit	7, (iy + 11)	; scale sign
	jr	z, .scale_up
.scale_down:
	; HL is not INT_MIN here
	dec	hl
	add	hl, hl
	jr	nc, .finish	; expon > 0
	; expon <= 0 or subnormal
.underflow_to_zero:
	ld	hl, ___fe_cur_env
	set	5, (hl)	; FE_INEXACT
if 0
	ld	a, (iy + 6)
	and	a, $80	; copysign
else
	xor	a, a	; avoid returning negative zero with Ti's floats
end if
	sbc	hl, hl
.common_erange:
	ld	bc, 5	; ERANGE
	ld	(_errno), bc
	ld	e, a
	ret
.overflow_to_inf:
	ld	hl, $800000
	ld	a, (iy + 6)
	or	a, $7F	; copysign
	jr	.common_erange

.scale_up:
	ld	bc, -255
	add	hl, bc
	jr	c, .overflow_to_inf
.finish:
	ld	l, a
	ex	de, hl
	; signbit(A) E:UHL >>= 1
	ld	a, (iy + 6)	; expon
	push	hl
	rla
	rr	e
	rr	(iy - 1)
	pop	hl
	rr	h
	rr	l
	ret

.maybe_subnormal:
	dec	bc	; BC is now -1
	add	hl, bc
	jr	c, .underflow_to_zero
	; return zero
.ret_self:
	ld	hl, (iy + 3)
	ld	e, (iy + 6)
	ret

else

; normal inputs are handled correctly, unless the output is subnormal
; subnormal inputs are handled correctly for positive scaling values
; subnormal outputs return zero and set ERANGE and FE_INEXACT for negative scaling values
; zero/infinite/NaN inputs are handled correctly
_ldexpf:
_ldexp:
_scalbnf:
_scalbn:
	ld	iy, 0
	lea	bc, iy + 0
	add	iy, sp
	ld	hl, (iy + 3)	; mant
	add	hl, hl
	ld	e, (iy + 6)	; expon
	ld	a, e
	rl	e
	jr	z, .maybe_subnormal
	inc	e
	jr	z, .ret_self	; inf NaN
	dec	e
	ld	c, e
	ex	de, hl
	ld	hl, (iy + 9)	; scale
	add	hl, bc	; add expon
	ld	a, l
	bit	7, (iy + 11)	; scale sign
	jr	z, .scale_up
.scale_down:
	; test signbit
	push	hl
	; HL is not INT_MIN here
	dec	hl
	add	hl, hl
	pop	hl
	jr	nc, .finish	; expon > 0
	; expon <= 0 or subnormal
;	jr	.underflow_to_zero
.underflow_to_zero:
	ld	hl, ___fe_cur_env
	set	5, (hl)	; FE_INEXACT
	ld	a, (iy + 6)
	and	a, $80	; copysign
	sbc	hl, hl
.common_erange:
	ld	bc, 5	; ERANGE
	ld	(_errno), bc
	ld	e, a
	ret
.overflow_to_inf:
	ld	hl, $800000
	ld	a, (iy + 6)
	or	a, $7F	; copysign
	jr	.common_erange

.scale_up:
	ld	bc, -255
	add	hl, bc
	jr	c, .overflow_to_inf
.finish:
	ld	l, a
	ex	de, hl
.finish_subnormal:
	; signbit(A) E:UHL >>= 1
	ld	a, (iy + 6)	; expon
	push	hl
	rla
	rr	e
	rr	(iy - 1)
	pop	hl
	rr	h
	rr	l
	ret

.maybe_subnormal:
	dec	bc	; BC is now -1
	add	hl, bc
;	jr	c, .underflow_to_zero
	jr	c, .subnormal
	; return zero
.ret_self:
	ld	hl, (iy + 3)
	ld	e, (iy + 6)
	ret

.subnormal:
	; BC is -1 here
	bit	7, (iy + 11)	; scale sign
	jr	nz, .underflow_to_zero
	ld	de, (iy + 9)	; scale
	ld	hl, (iy + 3)	; mant
.norm_loop:
	add	hl, hl
	jr	c, .normalized
	ex	de, hl
	add	hl, bc	; --scale
	ex	de, hl
	jr	c, .norm_loop
; .still_subnormal:
	ld	e, 0
	jr	.finish_subnormal
.normalized:
	inc	de
	ex	de, hl
	ld	a, l
	jr	.scale_up

end if

	extern	___fe_cur_env
	extern	_errno

end if
