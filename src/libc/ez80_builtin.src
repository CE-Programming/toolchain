	assume	adl=1

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_clzc
___ez80_clzc:
	ld	hl, 3
	add	hl, sp
	ld	a, (hl)
	jp	__bctlz

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_clzi48
___ez80_clzi48:
	ld	hl, 6
	add	hl, sp
	ld	de, (hl)
	dec	hl
	dec	hl
	dec	hl
	ld	hl, (hl)
	jp	__i48ctlz

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_ctzc
___ez80_ctzc:
	; unoptimized
	ld	hl, 3
	add	hl, sp
	ld	a, (hl)
	ld	l, a
	cpl
	dec	l
	and	a, l
	ld	l, a
	jp	__bpopcnt

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_ctzi48
___ez80_ctzi48:
	; unoptimized
	ld	a, 48
	ld	iy, 0
	add	iy, sp
	ld	hl, (iy + 3)
	ld	de, (iy + 6)
	call	__i48cmpzero
	ret	z
	ld	bc, (iy + 3)
	ld	iy, (iy + 6)
	call	__i48sub_1
	call	__i48xor
	call	__i48popcnt
	dec	a
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_ffsc
___ez80_ffsc:
	; unoptimized
	ld	hl, 3
	add	hl, sp
	ld	a, (hl)
	or	a, a
	ret	z
	ld	l, a
	dec	l
	xor	a, l
	jp	__bpopcnt

;-------------------------------------------------------------------------------
	
	section	.text

	public	___ez80_ffss
___ez80_ffss:
	; unoptimized
	ld	hl, 3
	add	hl, sp
	ld	hl, (hl)
	xor	a, a
	or	a, h
	or	a, l
	ret	z
	ld	b, h
	ld	c, l
	dec	bc
	;	HL ^ (HL - 1)
	ld	a, h
	xor	a, b
	ld	h, a
	ld	a, l
	xor	a, c
	ld	l, a
	jp	__spopcnt

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_ffsi48
___ez80_ffsi48:
	; unoptimized
	xor	a, a
	ld	iy, 0
	add	iy, sp
	ld	hl, (iy + 3)
	ld	de, (iy + 6)
	call	__i48cmpzero
	ret	z
	ld	bc, (iy + 3)
	ld	iy, (iy + 6)
	call	__i48sub_1
	call	__i48xor
	jp	__i48popcnt

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_clrsbc
___ez80_clrsbc:
	; unoptimized
	ld	hl, 3
	add	hl, sp
	ld	a, (hl)
	rlca
	sbc	hl, hl
	xor	a, l
	rrca	
	call	__bctlz
	dec	a
	ret

;-------------------------------------------------------------------------------
	
	section	.text

	public	___ez80_clrsbs
___ez80_clrsbs:
	; unoptimized
	ld	hl, 3
	add	hl, sp
	ld	hl, (hl)
	ld	a, h
	rla
	call	c, __snot
	call	__sctlz
	dec	a
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_clrsbi48
___ez80_clrsbi48:
	; unoptimized
	ld	hl, 8
	add	hl, sp
	ld	a, (hl)
	dec	hl
	dec	hl
	ld	de, (hl)
	dec	hl
	dec	hl
	dec	hl
	ld	hl, (hl)
	rla
	call	c, __i48not
	call	__i48ctlz
	dec	a
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_parityc
___ez80_parityc:
	xor	a, a
	ld	hl, 3
	add	hl, sp
	or	a, (hl)
	ld	a, 0
	ret	pe
	dec	a
	ret

;-------------------------------------------------------------------------------
	
	section	.text

	public	___ez80_paritys
___ez80_paritys:
	; unoptimized
	ld	hl, 3
	add	hl, sp
	ld	hl, (hl)
	call	__spopcnt
	rrca
	sbc	a, a
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_parityi48
___ez80_parityi48:
	; unoptimized
	ld	hl, 6
	add	hl, sp
	ld	de, (hl)
	dec	hl
	dec	hl
	dec	hl
	ld	hl, (hl)
	call	__i48popcnt
	rrca
	sbc	a, a
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_popcountc
___ez80_popcountc:
	ld	hl, 3
	add	hl, sp
	ld	a, (hl)
	jp	__bpopcnt

;-------------------------------------------------------------------------------
	
	section	.text

	public	___ez80_popcounts
___ez80_popcounts:
	ld	hl, 3
	add	hl, sp
	ld	hl, (hl)
	jp	__spopcnt

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_popcounti48
___ez80_popcounti48:
	ld	hl, 6
	add	hl, sp
	ld	de, (hl)
	dec	hl
	dec	hl
	dec	hl
	ld	hl, (hl)
	jp	__i48popcnt

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_bswap24
___ez80_bswap24:
	; unoptimized
	ld	iy, 0
	add	iy, sp
	ld	h, (iy + 3)
	ld	l, (iy + 5)
	ld	(iy + 3), l
	ld	(iy + 5), h
	ld	hl, (iy + 3)
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_bswap48
___ez80_bswap48:
	pop	bc, hl, de
	push	de, hl, bc
	jp	__i48bswap

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_bitreverse48
___ez80_bitreverse48:
	pop	bc, hl, de
	push	de, hl, bc
	jp	__i48bitrev

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_rotateleft24
___ez80_rotateleft24:
	; unoptimized
	ld	iy, 0
	lea	de, iy + 0
	add	iy, sp
	ld	hl, (iy + 3)
	ld	a, (iy + 6)
	ld	c, 24
.mod24:
	sub	a, c
	jr	nc, .mod24
	add	a, c
	ret	z
	ld	b, a
.loop:
	add	hl, hl
	adc	hl, de
	djnz	.loop
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_rotateleft48
___ez80_rotateleft48:
	; unoptimized
	ld	iy, 0
	lea	bc, iy + 0
	add	iy, sp
	ld	hl, (iy + 3)
	ld	de, (iy + 6)
	ld	a, (iy + 9)
	ld	c, 48
.mod48:
	sub	a, c
	jr	nc, .mod48
	add	a, c
	ret	z
	ld	c, 0
.loop:
	add	hl, hl
	ex	de, hl
	adc	hl, hl
	ex	de, hl
	adc	hl, bc
	dec	a
	jr	nz, .loop
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_rotateright24
___ez80_rotateright24:
	; unoptimized
	ld	iy, 0
	lea	de, iy + 0
	add	iy, sp
	ld	hl, (iy + 3)
	ld	a, (iy + 6)
	ld	c, 24
.mod24:
	sub	a, c
	jr	nc, .mod24
	neg
	cp	a, c
	ret	z
	ld	b, a
.loop:
	add	hl, hl
	adc	hl, de
	djnz	.loop
	ret

;-------------------------------------------------------------------------------

	section	.text

	public	___ez80_rotateright48
___ez80_rotateright48:
	; unoptimized
	ld	iy, 0
	lea	bc, iy + 0
	add	iy, sp
	ld	hl, (iy + 3)
	ld	de, (iy + 6)
	ld	a, (iy + 9)
	ld	c, 48
.mod48:
	sub	a, c
	jr	nc, .mod48
	neg
	cp	a, c
	ret	z
	ld	c, 0
.loop:
	add	hl, hl
	ex	de, hl
	adc	hl, hl
	ex	de, hl
	adc	hl, bc
	dec	a
	jr	nz, .loop
	ret

;-------------------------------------------------------------------------------

	extern	__snot
	extern	__i48not
	extern	__i48xor
	extern	__i48cmpzero
	extern	__i48sub_1

	extern	__bctlz
	extern	__sctlz
	extern	__i48ctlz

	extern	__bpopcnt
	extern	__spopcnt
	extern	__i48popcnt

	extern	__i48bitrev

	extern	__i48bswap
