#----------------------------
# Makefile
#----------------------------
CSTARTUP_OBJ  ?= cstartup.obj
LIBHEADER_OBJ ?= libheader.obj
CCLEANUP_OBJ  ?= ccleanup.obj
CLEANUP       ?= YES
#----------------------------

VERSION := 7.3

#----------------------------
# try not to edit anything below these lines unless you know what you are doing
#----------------------------

#----------------------------

# define some common makefile things
empty :=
space := $(empty) $(empty)
comma := $(empty),$(empty)

TARGET ?= $(NAME)
ICONPNG ?= $(ICON)

BSSHEAP_LOW  := D031F6
BSSHEAP_HIGH := D13FD6
STACK_HIGH   := D1A87E
INIT_LOC     := D1A87F

ifeq ($(OS),Windows_NT)
SHELL     := cmd.exe
NATIVEPATH = $(subst /,\,$(1))
WINPATH    = $(NATIVEPATH)
WINRELPATH = $(subst /,\,$(1))
WINCHKDIR  = if not exist
RM         = del /q /f 2>nul
CEDEV     ?= $(call NATIVEPATH,$(realpath ..\..))
BIN       ?= $(call NATIVEPATH,$(CEDEV)/bin)
AS         = $(call NATIVEPATH,$(BIN)/ez80asm.exe)
LD         = $(call NATIVEPATH,$(BIN)/ez80link.exe)
CC         = $(call NATIVEPATH,$(BIN)/ez80cc.exe)
CD         = cd
CP         = copy /y
CV         = $(call NATIVEPATH,$(BIN)/convhex.exe)
PG         = $(call NATIVEPATH,$(BIN)/convpng.exe)
NULL       = >nul 2>&1
RMDIR      = rmdir /s /q
MKDIR      = mkdir
else
NATIVEPATH = $(subst \,/,$(1))
WINPATH    = $(subst \,\\,$(shell winepath --windows $(1)))
WINRELPATH = $(subst /,\,$(1))
RM         = rm -f
CEDEV     ?= $(call NATIVEPATH,$(realpath ..\..))
BIN       ?= $(call NATIVEPATH,$(CEDEV)/bin)
AS         = $(call NATIVEPATH,wine $(BIN)/ez80asm.exe)
LD         = $(call NATIVEPATH,wine $(BIN)/ez80link.exe)
CC         = $(call NATIVEPATH,wine $(BIN)/ez80cc.exe)
CD         = cd
CP         = cp
CV         = $(call NATIVEPATH,$(BIN)/convhex)
PG         = $(call NATIVEPATH,$(BIN)/convpng)
RMDIR      = rm -rf
MKDIR      = mkdir -p
endif

# generate the default names for input and object files
TARGETHEX     := $(TARGET).hex
TARGETMAP     := $(TARGET).map
TARGETTYPE    := $(TARGET).8xp
ICON_ASM      := iconc.src

# default objects
ICON_OBJ      := $(ICON_ASM:%.src=%.obj)

# find all the directories in the source input
ALLDIRS       := $(sort $(dir $(wildcard $(SRCDIR)/*/)))

# find all of the available C, H and ASM files (Remember, you can create C <-> assembly routines easily this way)
SOURCES       := $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.c)))
USERHEADERS   := $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.h)))
ASMSOURCES    := $(call NATIVEPATH,$(foreach dir,$(ALLDIRS),$(wildcard $(dir)*.asm)))

# figure out what the names of the sources will become once made into objects
OBJECTS       += $(addprefix $(OBJDIR)/,$(notdir $(SOURCES:%.c=%.obj)))
OBJECTS       += $(addprefix $(OBJDIR)/,$(notdir $(ASMSOURCES:%.asm=%.obj)))

# check if there is an icon present that we can convert; if so, generate a recipe to build it properly
ifneq ("$(wildcard $(ICONPNG))","")
ICON_CONV := $(PG) -c $(ICONPNG)$(comma)$(DESCRIPTION) && \
             $(CP) $(ICON_ASM) $(OBJDIR) $(NULL) && \
             $(RM) $(ICON_ASM) $(NULL)
OBJECTS += $(OBJDIR)/$(ICON_OBJ)
LDICON := locate .icon at (top of .header)+1 \
	  locate .launcher at (top of .icon)+1
else
LDICON := locate .launcher at (top of .header)+1
endif

# determine if output should be archived or compressed
ifeq ($(ARCHIVED),YES)
CVFLAGS := -a
endif
ifeq ($(COMPRESSED),YES)
CVFLAGS += -x
endif
ifeq ($(CLEANUP),YES)
OBJECTS += $(call NATIVEPATH,$(CEDEV)/lib/$(CCLEANUP_OBJ))
LDCLEAN := locate .cleanup at (top of .startup)+1 \
	   locate .exit at (top of .cleanup)+1
else
LDCLEAN := locate .exit at (top of .startup)+1
endif

# choose static or linked flash functions
ifeq ($(USE_FLASH_FUNCTIONS),YES)
LINKED_OS_FUN := clinked.lib
else
LINKED_OS_FUN := cstatic.lib
endif

OBJECTS += $(call NATIVEPATH,$(addprefix $(CEDEV)/lib/,cce.lib cshared.lib $(LINKED_OS_FUN)))

# are there any shared libraries that we need to find? If so, add in the proper objects and sources and header files
ifdef L
OBJECTS += $(call NATIVEPATH,$(foreach var,$(L),$(CEDEV)/lib/$(var).lib))
OBJECTS += $(call NATIVEPATH,$(strip $(foreach var,$(L),$(space)$(CEDEV)/lib/$(var)_header.obj)))
OBJECTS += $(call NATIVEPATH,$(CEDEV)/lib/$(LIBHEADER_OBJ))
endif

# the main startup moduel
OBJECTS += $(call NATIVEPATH,$(CEDEV)/lib/$(CSTARTUP_OBJ))

# define the nesassary headers, along with any the user may have defined, where modification should just trigger a build
HEADERS := $(subst $(space),;,$(call WINPATH,$(ALLDIRS) $(addprefix $(CEDEV)/,include include/compat)))
HEADERS := $(subst \;,;,$(HEADERS))
HEADERS := $(subst \;,;,$(HEADERS))
HEADERS := $(subst /;,;,$(HEADERS))

# define the assembler flags used by the Zilog assembler
ASM_FLAGS ?= \
	-define:_EZ80 -define:$(DEBUGMODE) -quiet -sdiopt -warn -NOdebug -NOigcase -NOlist -NOlistmac -cpu:EZ80F91

# define the C flags used by the Zilog compiler
CFLAGS ?= \
	-define:_EZ80 -define:$(DEBUGMODE) -NOlistinc -NOmodsect -cpu:EZ80F91 -keepasm \
	-optspeed -NOreduceopt -NOgenprintf -quiet -stdinc:"$(HEADERS)" -NOdebug -asmsw:"$(ASM_FLAGS)"

# this is a giant mess, but basically it is just repeated code to properly align all of the necessary libraries and
# their header information. kind of annoying, but this is the only certain way ZDS is able to organize things properly
# currently 5 libraries are supported; more can be added later if needed (probably not)
ifdef L
LIBNUM := $(words $(L))
LDLIBS := locate .$(word 1,$(L))_header at (top of .libs)+1
LDLIBS += locate .$(word 1,$(L)) at (top of .$(word 1,$(L))_header)+1
ifneq ($(LIBNUM),1)
LDLIBS += locate .$(word 2,$(L))_header at (top of .$(word 1,$(L))+1)
LDLIBS += locate .$(word 2,$(L)) at (top of .$(word 2,$(L))_header)+1
ifneq ($(LIBNUM),2)
LDLIBS += locate .$(word 3,$(L))_header at (top of .$(word 2,$(L))+1)
LDLIBS += locate .$(word 3,$(L)) at (top of .$(word 3,$(L))_header)+1
ifneq ($(LIBNUM),3)
LDLIBS += locate .$(word 4,$(L))_header at (top of .$(word 3,$(L))+1)
LDLIBS += locate .$(word 4,$(L)) at (top of .$(word 4,$(L))_header)+1
ifneq ($(LIBNUM),4)
LDLIBS += locate .$(word 5,$(L))_header at (top of .$(word 4,$(L))+1)
LDLIBS += locate .$(word 5,$(L)) at (top of .$(word 5,$(L))_header)+1
endif
endif
endif
endif
LDLAST := .$(word $(words $(L)),$(L))
else
LDLAST := .libs
endif

# these are the linker flags, basically organized to properly set up the environment
LDFLAGS := \
	-FORMAT=INTEL32 \
	-map -maxhexlen=64 -quiet -warnoverlap -xref -unresolved=fatal \
	-sort ADDRESS=ascending -warn -NOdebug -NOigcase \
	define __copy_code_to_ram = 0 \
	range rom $$000000 : $$3FFFFF \
	range ram $$D00000 : $$FFFFFF \
	range bss $$$(BSSHEAP_LOW) : $$$(BSSHEAP_HIGH) \
	change code is ram \
	change data is ram \
	change text is ram \
	change strsect is text \
	define __low_bss = base of bss \
	define __len_bss = length of bss \
	define __heaptop = (highaddr of bss) \
	define __heapbot = (top of bss)+1 \
	define __stack = $$$(STACK_HIGH) \
	locate .header at $$$(INIT_LOC) \
	$(LDICON) \
	locate .libs at (top of .launcher)+1 \
	$(LDLIBS) \
	locate .startup at (top of $(LDLAST))+1 \
	$(LDCLEAN) \
	locate code at (top of .exit)+1 \
	locate data at (top of code)+1 \
	locate text at (top of data)+1

ifneq ($(OS),Windows_NT)
	LDFLAGS := '$(LDFLAGS)'
else
	WINCHKBINDIR := $(WINCHKDIR) $(BINDIR)
	WINCHKOBJDIR := $(WINCHKDIR) $(OBJDIR)
endif

# this rule is trigged to build everything
all: dirs $(BINDIR)/$(TARGET8XP)
	@echo Finished.

dirs:
	@$(WINCHKBINDIR) $(MKDIR) $(BINDIR)
	@$(WINCHKOBJDIR) $(MKDIR) $(OBJDIR)
	@echo C CE SDK Version $(VERSION)
	@echo Looking for changes...

$(BINDIR)/$(TARGET8XP): $(BINDIR)/$(TARGETHEX)
	@$(CD) $(BINDIR) && \
	$(CV) $(CVFLAGS) $(notdir $<)

$(BINDIR)/$(TARGETHEX): $(OBJECTS)
	@$(LD) $(LDFLAGS) $@ = "$(subst $(space),$(comma),$(strip $(call NATIVEPATH,$^)))"

# this rule handles conversion of the icon, if it is ever updated
$(OBJDIR)/$(ICON_OBJ): $(ICONPNG)
	@$(ICON_CONV) && \
	$(CD) $(OBJDIR) && \
	$(AS) $(ASM_FLAGS) $(ICON_ASM)

$(OBJDIR)/%.obj: $(GFXDIR)/%.c $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(CC) $(CFLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

$(OBJDIR)/%.obj: $(GFXDIR)/%.asm $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(AS) $(ASM_FLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

# this rule builds the assembly files and places them in the object directory
$(OBJDIR)/%.obj: $(SRCDIR)/%.asm $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(AS) $(ASM_FLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

# this rule builds the assembly files and places them in the object directory
$(OBJDIR)/%.obj: $(SRCDIR)/*/%.asm $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(AS) $(ASM_FLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

# these rules compile the source files into object files
$(OBJDIR)/%.obj: $(SRCDIR)/%.c $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(CC) $(CFLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

# these rules compile the source files into object files
$(OBJDIR)/%.obj: $(SRCDIR)/*/%.c $(USERHEADERS)
	@$(CD) $(OBJDIR) && \
	$(CC) $(CFLAGS) $(call WINPATH,$(addprefix $(CURDIR)/,$<))

clean:
	@$(RM) $(call NATIVEPATH,$(BINDIR)/$(TARGETHEX) $(BINDIR)/$(TARGETTYPE) $(BINDIR)/$(TARGETMAP) $(OBJDIR)/$(ICON_ASM) $(OBJDIR)/*.obj $(OBJDIR)/*.src)
	@echo Cleaned build files.

gfx:
	@$(CD) $(GFXDIR) && convpng

version:
	@echo C SDK Version $(VERSION)

.PHONY: all clean version gfx dirs

