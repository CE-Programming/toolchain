	assume	adl=1

define ti? ti
namespace ti?
?Mov9b                     := 00202FCh
?Mov8b                     := 0020304h
?Mov9ToOP1                 := 0020320h
?MovFROP1                  := 002032Ch
?MemChk                    := 00204FCh
?ChkFindSym                := 002050Ch
?InsertMem                 := 0020514h
?EnoughMem                 := 002051Ch
?DelMem                    := 0020590h
?PopRealO1                 := 00205DCh
?ErrNotEnoughMem           := 002072Ch
?ErrMemory                 := 0020768h
?JError                    := 0020790h
?PushErrorHandler          := 0020798h
?PopErrorHandler           := 002079Ch
?ParseInp                  := 0020F00h
?GetParse                  := 0020F0Ch
?SaveParse                 := 0020F10h
?DisableAPD                := 0021134h
?SetParserHook             := 002149Ch
?ClrParserHook             := 00214A0h
?DeleteTempPrograms        := 00214C0h
?ForceFullScreen           := 0021528h
?LoadDEInd_s               := 0021D9Ch
?ChkInRam                  := 0021F98h
?flags                     := 0D00080h
?tempSP                    := 0D0053Fh
?kbdGetKy                  := 0D0058Dh
?OP1                       := 0D005F8h
?errNo                     := 0D008DFh
?appErr2                   := 0D025B6h
?parserHookPtr             := 0D025F9h
?pixelShadow               := 0D031F6h
?asm_prgm_size             := 0D0118Ch
?userMem                   := 0D1A881h
?cursorImage               := 0E30800h
?tExtTok                   := 0EFh
?ProgObj                   := 005h
?tAsm84CeCmp               := 07Bh
?tAsm84CePrgm              := 07Ah

?hookflags4                := 36h
?parserHookActive          := 1

?ParsFlag2                 := 7h
?numOP1                    := 0
?newDispF                  := 08h
?allowProgTokens           := 1
?progExecuting             := 1
?cmdFlags                  := 0Ch
?cmdExec                   := 6
?onFlags                   := 09h
?onInterrupt               := 4
?textFlags                 := 05h
?textEraseBelow            := 1
?textScrolled              := 2
?textInverse               := 3
end namespace

	section	.text
	public	_os_RunPrgm
_os_RunPrgm:
	require	___prgm_run_check
	ld	iy,ti.flags
	pop	de
	pop	hl
	push	hl
	push	de
	ld	a,ti.ProgObj
	ld	de,___prgm_to_run - reloc.offset
	ld	(de),a
	inc	de
	call	ti.Mov8b
	ld	hl,___prgm_caller
	ld	de,stub.prgm - reloc.offset
	call	ti.Mov9b
	ld	hl,___prgm_to_run - reloc.offset
	call	find_prgm - reloc.offset
	jr	nc,.found
	sbc	hl,hl
	ret
.found:
	ld	a,(ti.OP1)
	ld	(___prgm_to_run - reloc.offset),a
	ld	(___prgm_to_run_size - reloc.offset),de
	ld	a,(hl)
	cp	a,ti.tExtTok
	jr	nz,run_basic_prgm
	inc	hl
	ld	a,(hl)
	cp	a,ti.tAsm84CeCmp
	jr	z,run_asm_prgm
	;jr	run_basic_prgm

run_basic_prgm:
	call	push_user_data
	ld	hl,reloc.data
	ld	de,ti.cursorImage
	ld	bc,reloc.data.len
	ldir
	jp	launch_basic_prgm

run_asm_prgm:
	inc	hl
	ld	a,(hl)			; if 0, indicates a C program with retval
	sbc	hl,hl
	or	a,a
	jr	nz,.not_c
	ld	(stub.basic_c_smc - reloc.offset),hl
.not_c:
	ld	l,64
	add	hl,de
	ld	de,(ti.asm_prgm_size)
	sbc	hl,de
	jr	c,.enough_mem
	call	ti.EnoughMem
	jr	nc,.enough_mem
	sbc	hl,hl
	dec	hl
	ret
.enough_mem:
	call	push_user_data
	ld	hl,reloc.data
	ld	de,ti.cursorImage
	ld	bc,reloc.data.len
	ldir
	jp	launch_asm_prgm

push_user_data:
	ld	iy,3			; exit() doesn't unwind stack so "safe"
	add	iy,sp
	ld	hl,(iy + 12)		; callback
	add	hl,de
	or	a,a
	sbc	hl,de
	ld	de,stub.callback - reloc.offset
	jr	nz,.has_callback
	dec	de
	ld	hl,((-(stub.callback - stub.error + 1)) shl 8) or $18	; jr stub.error
.has_callback:
	ex	de,hl
	ld	(hl),de
	ld	bc,(iy + 9)
	ld	(push_stub.data_size - reloc.offset),bc
	ld	hl,(_exit.sp)
	or	a,a
	sbc	hl,bc			; resets carry
	push	hl
	pop	de
	dec	hl
	dec	hl
	dec	hl
	ld	(_exit.sp),hl
	sbc	hl,hl
	adc	hl,bc			; resets carry
	ld	hl,(iy + 6)
	pop	iy
	di				; disable to prevent modifying moved stack data
	jr	z,.done_move
	sbc	hl,de
	jr	c,.lddr
	add	hl,de
	ldir
	jr	.done_move
.lddr:
	ex	de,hl
	add	hl,bc
	dec	hl
	ex	de,hl
	add	hl,de
	lddr
.done_move:
	ld	hl,(_exit.sp)
	ld	(hl),iy			; fake return
	ld	iy,ti.flags
	or	a,a
	sbc	hl,hl
	jq	___exithl		; should return to caller

virtual at ti.cursorImage
launch_asm_prgm:
	call	delete_running_prgm
	call	setup_prgm_state
	call	push_stub
	ld	de,(___prgm_to_run_size)
	ld	hl,ti.userMem
	ex	hl,de
	call	ti.InsertMem
	ld	hl,___prgm_to_run
	call	find_prgm
	jr	c,.fatal
	inc	hl
	inc	hl
	ld	de,ti.userMem
	ld	bc,(___prgm_to_run_size)
	ld	(ti.asm_prgm_size),bc
	ldir
	ld	hl,___prgm_to_run
	call	ti.Mov9ToOP1
	jp	ti.userMem
.fatal:
	ld	de,(___prgm_to_run_size)
	ld	hl,ti.userMem
	call	ti.DelMem
	jp	ti.ErrMemory

launch_basic_prgm:
	call	delete_running_prgm
	call	setup_temp_parser_hook
	call	setup_prgm_state
	call	push_stub
	ld	hl,___prgm_to_run
	set	ti.allowProgTokens,(iy + ti.newDispF)
	set	ti.cmdExec,(iy + ti.cmdFlags)
	call	ti.Mov9ToOP1
	jp	ti.ParseInp

setup_save_parser_hook:
	or	a,a
	sbc	hl,hl
	bit	ti.parserHookActive,(iy + ti.hookflags4)
	jr	z,.not_set
	ld	hl,(ti.parserHookPtr)
.not_set:
	ld	(stub.prev_hook),hl
	ret

setup_prgm_state:
	call	setup_save_parser_hook
	xor	a,a
	ld	(ti.kbdGetKy),a
	ld	a,$ce			; set
	bit	ti.allowProgTokens,(iy + ti.newDispF)
	jr	nz,.setAllowProgTokens
	res	ti.numOP1,(iy + ti.ParsFlag2)
	ld	a,$8e			; res
.setAllowProgTokens:
	ld	(stub.flags.newDispF),a
	ld	a,$f6			; set
	bit	ti.cmdExec,(iy + ti.cmdFlags)
	jr	nz,.setCmdExec
	ld	a,$b6			; res
.setCmdExec:
	ld	(stub.flags.cmdFlags),a
	jp	ti.DisableAPD

setup_temp_parser_hook:
	bit	ti.parserHookActive,(iy + ti.hookflags4)
	jr	nz,.chain_hook
.no_chain:
	ld	hl,stub.chain
	ld	(hl),$af		; xor a,a
	inc	hl
	ld	(hl),$c9		; ret
	ret
.chain_hook:
	ld	hl,(ti.parserHookPtr)
	ld	a,(hl)
	cp	a,$83
	jr	nz,.no_chain		; ensure the hook is valid
	ld	(stub.chain + 1),hl
	xor	a,a
	ld	(push_stub.skip_parser_hook_jr),a
	ret

delete_running_prgm:
	ld	iy,ti.flags
	ld	hl,ti.userMem
	ld	de,(ti.asm_prgm_size)
	call	ti.DelMem
	or	a,a
	sbc	hl,hl
	ld	(ti.asm_prgm_size),hl
	ret

push_stub:
	pop	hl
	ld	(.ret),hl
	ld	hl,stub.prgm
	call	find_prgm
	ld	(.stub_prgm_size),de
	ld	(.prev_sp),sp
	ld	hl,-9
	add	hl,sp
	ld	sp,hl
	ld	(.stub_prgm),hl
	ex	de,hl
	ld	hl,stub.prgm
	ld	bc,9
	ldir
	ld	hl,-(stub.len - 9)
	add	hl,sp
	ld	sp,hl
	ld	(.stub_normal),hl
	push	hl
	ld	bc,stub.error_handler - stub.normal
	add	hl,bc
	ld	(.stub_error_handler),hl
	pop	hl
	jr	.skip_parser_hook
.skip_parser_hook_jr := $-1
	push	hl
	ld	bc,stub.hook_parser - stub.normal
	add	hl,bc
	call	ti.SetParserHook
	pop	hl
.skip_parser_hook:
	ex	de,hl
	ld	hl,stub
	ld	bc,stub.len
	ldir
	ld	hl,0
.prev_sp := $-3
	push	hl
	ld	hl,0
.data_size := $-3
	push	hl
	ld	hl,0
.stub_prgm := $-3
	push	hl
	ld	hl,0
.stub_prgm_size := $-3
	push	hl
	call	ti.SaveParse
	ld	hl,0
.stub_error_handler := $-3
	call	ti.PushErrorHandler
	ld	hl,0
.stub_normal := $-3
	push	hl
	jp	0
.ret := $-3

find_prgm:
	call	ti.Mov9ToOP1
	call	ti.ChkFindSym
	ret	c
	call	ti.ChkInRam
	ex	de,hl
	jr	z,.in_ram
	ld	de,9
	add	hl,de
	ld	e,(hl)
	add	hl,de
	inc	hl
.in_ram:
	call	ti.LoadDEInd_s
	or	a,a
	ret

stub:
.normal:
	xor	a,a
	sbc	hl,hl
.basic_c_smc := $-3
	ld	(ti.cursorImage),hl
	ld	iy,ti.flags
	call	ti.PopErrorHandler
	jr	.no_error
.error_handler:
	or	a,a
	sbc	hl,hl
	ld	l,a
	ld	(ti.cursorImage),hl
.no_error:
	ld	iy,ti.flags
	set	ti.allowProgTokens,(iy + ti.newDispF)
.flags.newDispF := $-1
	set	ti.cmdExec,(iy + ti.cmdFlags)
.flags.cmdFlags := $-1
	res	ti.textInverse,(iy + ti.textFlags)
	res	ti.onInterrupt,(iy + ti.onFlags)
	res	ti.numOP1,(iy + ti.ParsFlag2)
	call	ti.ClrParserHook
	ld	hl,0
.prev_hook := $-3
	ld	a,(hl)
	cp	a,$83
	call	z,ti.SetParserHook
	ld	hl,(ti.asm_prgm_size)
	add	hl,de
	or	a,a
	sbc	hl,de
	ex	de,hl
	ld	hl,ti.userMem
	call	nz,ti.DelMem
	call	ti.PopRealO1
	call	ti.GetParse
	pop	de		; size of return program -- shouldn't change?
	push	de
	call	ti.ErrNotEnoughMem
	pop	hl
	ld	(ti.asm_prgm_size),hl
	ld	de,ti.userMem
	call	ti.InsertMem
	pop	hl		; stub program to return
	call	ti.Mov9ToOP1
	call	ti.ChkFindSym
	jr	nc,.found
.error:
	pop	bc
	pop	hl
	add	hl,bc
	ld	sp,hl		; os should delete created program
	ret
.hook_parser:
	db	$83		; hook signifier
	cp	a,2
	jr	nz,.chain
	ld	a,$d9 - $ce	; check if stop token
	sub	a,b
	jp	z,ti.JError
	ld	a,2
.chain:
	jp	0		; xor a,a \ ret if not chaining
.found:
	call	ti.ChkInRam
	ex	de,hl
	jr	z,.in_ram
	ld	de,9
	add	hl,de
	ld	e,(hl)
	add	hl,de
	inc	hl
.in_ram:
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	bc,(ti.asm_prgm_size)
	ld	de,ti.userMem
	ldir
	ld	de,0
.callback := $-3
	pop	bc			; data size
	pop	hl			; data
	di
	ld	sp,hl
	push	bc
	push	de			; push callback address
	scf
	ld	hl,(ti.cursorImage)
	push	hl			; push retval
	sbc	hl,hl
	push	hl			; return of -1 should never occur
	jp	ti.userMem
	rb	3			; padding bytes for sp change
.prgm:
	rb	9
.len := $-stub

___prgm_to_run:
	rb	9
___prgm_to_run_size:
	dl	0

	private	reloc_rodata
load reloc_rodata: $-$$ from $$
end virtual

	section	.data
	private	reloc.data
	private	reloc.data.len
reloc.data:
	db	reloc_rodata
.len := $-.
reloc.base := ti.cursorImage
reloc.offset := reloc.base - reloc.data

	section	.data
	public	___prgm_caller
___prgm_caller:
	rb	9

	extern	___exithl
	extern	_exit.sp
	extern	_exit.offset
	extern	___prgm_run_check
