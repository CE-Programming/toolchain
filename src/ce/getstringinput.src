	assume	adl=1

kUp           := 3
kLeft         := 2
kDown         := 4
kEnter        := 5
kClear        := 9
kRight        := 1
kQuit         := $40
kIns          := $0B
curLock       := 4
flags         := $D00080
keyExtend     := $D0058E
curRow        := $D00595		; also includes curCol
curUnder      := $D00599
_PutS         := $207C0
_PutC         := $207B8
_PutPS        := $207C8
_GetKey       := $20D8C
_CursorOn     := $208B0
_CursorOff    := $208A8
_PullDownChk  := $208BC
_ConvKeyToTok := $20E40
_GetTokString := $20874
_PutTokString := $20D74
_ClrTxtShd    := $20818

	section	.text
	public	_os_GetStringInput
_os_GetStringInput:
	push	ix
	ld	ix,0
	add	ix,sp
	push	ix
	ld	iy,flags
	ld	a,(iy + $0d)
	ld	(.smc.text_flag_0),a
	ld	a,(iy + $4c)
	ld	(.smc.text_flag_1),a
	set	1,(iy + $0d)		; use text buffer
	res	5,(iy + $4c)		; use text buffer
	call	_ClrTxtShd
	pop	ix
	ld	hl,(ix+6)		; hl -> input string prompt
	add	hl,de
	xor	a,a
	sbc	hl,de
	ld	iy,flags
	call	nz,_PutS
	ld	hl,(curRow)
.start:
	push	hl			; save initial row/column
	ld	hl,(ix+12)		; buffer size
	add	hl,de
	xor	a,a
	sbc	hl,de
	jp	z,.empty
	push	hl			; save remaining size
	ld	de,(ix+9)
.loop_save:
	push	de			; save buf pointer
.loop:
	ld	iy,flags
	push	ix
	call	_CursorOn
.getkey:
	call	_GetKey
	call	_CursorOff
	call	_PullDownChk
	push	af
	call	_CursorOn
	pop	af
	jr	c,.getkey
	pop	ix
	cp	a,kQuit
	jr	z,.done_trampoline
	dec	a			; kRight=1
	cp	a,kEnter-kRight		; kEnter=kDown+1
	jr	c,.loop
	jr	z,.done_trampoline
	inc	a
	cp	a,kIns
	jr	z,.loop
	cp	a,kClear
	jr	z,.clear
	push	ix
	cp	a,$F3			; for lists? idk something is wrong with _PullDownChk
	jr	c,.conv_key
	cp	a,$FB+1
	jr	nc,.conv_key
	sub	a,$7C
	ld	(keyExtend),a
	ld	a,$FE
.conv_key:
	call	_ConvKeyToTok
	call	_GetTokString
	pop	ix
	pop	de			; restore buf pointer
	ld	b,(hl)			; token string length
	inc	hl
.draw_string:
	ex	(sp),hl			; remaining size
	add	hl,de
	scf
	sbc	hl,de			; decrement and check if done
	ex	(sp),hl
	jr	z,.full
	ld	a,(hl)
	ld	(de),a
	inc	hl
	inc	de
	call	_PutC
	djnz	.draw_string
	jr	.loop_save
.full:
	push	de			; save buf pointer
.full_loop:
	push	ix
	call	_GetKey
	pop	ix
	cp	a,kEnter
.done_trampoline:
	jr	z,.done
	cp	a,kClear
	jr	nz,.full_loop
.clear:
	pop	hl			; restore buf pointer
	inc	hl
	pop	de			; remaining size
	pop	de			; initial row/column
	ld	(curRow),de
.clear_loop:
	ld	a,' '
	call	_PutC
	ld	bc,(ix+9)
	scf
	sbc	hl,bc			; decrement and compare to buf start
	add	hl,bc
	jr	nz,.clear_loop
	ex	de,hl
	ld	(curRow),hl
	jp	.start
:
	call	_ClrTxtShd
	call	_CursorOff
.smc.text_flag_0 := $+1
	ld	a,0
	ld	(iy + $0d),a
.smc.text_flag_1 := $+1
	ld	a,0
	ld	(iy + $4c),a
	pop	hl			; restore buf pointer
	ld	(hl),0
.empty:
	ld	sp,ix
	pop	ix
	ret
