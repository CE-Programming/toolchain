	assume	adl=1

kUp           := 3
kLeft         := 2
kDown         := 4
kEnter        := 5
kClear        := 9
kRight        := 1
kQuit         := $40
kIns          := $0B
curLock       := 4
flags         := $D00080
curRow        := $D00595		; also includes curCol
curUnder      := $D00599
_PutS         := $207C0
_PutC         := $207B8
_PutPS        := $207C8
_GetKey       := $20D8C
_CursorOn     := $208B0
_CursorOff    := $208A8
_PullDownChk  := $208BC
_ConvKeyToTok := $20E40
_GetTokString := $20874
_PutTokString := $20D74
_ClrTxtShd    := $20818

	section	.text
	public	_os_GetStringInput
_os_GetStringInput:
	push	ix
	ld	ix,0
	add	ix,sp
	push	ix
	ld	iy,flags
	ld	a,(iy + $0d)
	ld	(.smc.text_flag_0),a
	ld	a,(iy + $4c)
	ld	(.smc.text_flag_1),a
	set	1,(iy + $0d)		; use text buffer
	res	5,(iy + $4c)		; use text buffer
	call	_ClrTxtShd
	pop	ix
	ld	hl,(ix+6)		; hl -> input string prompt
	add	hl,de
	xor	a,a
	sbc	hl,de
	ld	iy,flags
	call	nz,_PutS
	ld	hl,(curRow)
	ld	(.smc.curRow),hl
	ld	hl,(ix+12)
	add	hl,de
	xor	a,a
	sbc	hl,de
	jr	nz,.not_empty
	pop	ix
	ret
.not_empty:
	dec	hl			; subtract 1 for null pointer
	ld	(ix+12),hl
	ld	(ix+6),hl		; save initial size
.start:
	ld	hl,(ix+6)		; restore initial size
	ld	(ix+12),hl
	or	a,a
	sbc	hl,hl
	ld	(.smc.str_len),hl
.loop:
	ld	iy,flags
	push	ix
	call	_CursorOn
.getkey:
	call	_GetKey
	call	_CursorOff
	call	_PullDownChk
	push	af
	call	_CursorOn
	pop	af
	jr	c,.getkey
	pop	ix
	cp	a,kQuit
	jp	z,.done
	cp	a,kLeft
	jr	z,.loop
	cp	a,kDown
	jr	z,.loop
	cp	a,kRight
	jr	z,.loop
	cp	a,kUp
	jr	z,.loop
	cp	a,kClear
	jp	z,.clear
	cp	a,kEnter
	jp	z,.done
	cp	a,kIns
	jr	z,.loop
	ld	de,(ix+9)
	ld	hl,(.smc.str_len)
	add	hl,de
	push	hl			; save buf pointer
	push	ix
	sub	a,$F3			; for lists? idk something is wrong with _PullDownChk
	cp	a,$FB-$F3+1
	jr	c,.sub_key
	add	a,$F3
	jr	.conv_key
.sub_key:
	sub	a,$7C-$F3		; (a-$F3)-($7C-$F3)=a-$7C
	ld	($0D0058E),a
	ld	a,$FE
.conv_key:
	call	_ConvKeyToTok
	call	_GetTokString
	pop	ix
	pop	de			; restore buf pointer
	ld	b,(hl)			; token string length
	inc	hl
.draw_string:
	push	hl
	ld	hl,(ix+12)
	add	hl,de
	xor	a,a
	sbc	hl,de			; check if done
	dec	hl
	ld	(ix+12),hl
	pop	hl
	jr	z,.full
	push	hl
	ld	hl,(.smc.str_len)
	inc	hl
	ld	(.smc.str_len),hl
	pop	hl
	ld	a,(hl)
	ld	(de),a
	inc	hl
	inc	de
	call	_PutC
	djnz	.draw_string
	jp	.loop
.full:
	push	ix
	call	_GetKey
	pop	ix
	cp	a,kEnter
	jr	z,.done
	cp	a,kClear
	jr	nz,.full
.clear:
.smc.curRow := $+1
	ld	hl,0
	ld	(curRow),hl
	ld	hl,(.smc.str_len)
	inc	hl
.clear_loop:
	push	hl
	ld	a,' '
	call	_PutC
	pop	hl
	ld	bc,1
	or	a,a
	sbc	hl,bc
	jr	nz,.clear_loop
	ld	hl,(.smc.curRow)
	ld	(curRow),hl
	jp	.start
.done:
	call	_ClrTxtShd
	call	_CursorOff
.smc.text_flag_0 := $+1
	ld	a,0
	ld	(iy + $0d),a
.smc.text_flag_1 := $+1
	ld	a,0
	ld	(iy + $4c),a
	ld	de,(ix+9)
.smc.str_len := $+1
	ld	hl,0
	add	hl,de
	ld	(hl),0
	pop	ix
	ret
