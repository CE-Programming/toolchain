// -*- C++ -*-
#ifndef _EZCXX_CHAR_TRAITS
#define _EZCXX_CHAR_TRAITS

#include <cstddef>
#include <cstdint>
#include <cstring>
#include <cstdio>

#pragma clang system_header

namespace std {

using streamoff  = ptrdiff_t;
using streamsize = ptrdiff_t;

} // namespace std

namespace std {

template<class CharT> struct char_traits;
template<> struct char_traits<char>;
template<> struct char_traits<char8_t>;
template<> struct char_traits<char16_t>;
template<> struct char_traits<char32_t>;
template<> struct char_traits<wchar_t>;

template<> struct char_traits<char> {
    using char_type = char;
    using int_type = int;
    using off_type = streamoff;

    static constexpr void assign(char_type& c1, const char_type& c2) noexcept {
        c1 = c2;
    }
    static constexpr bool eq(char_type c1, char_type c2) noexcept {
        return (c1 == c2);
    }
    static constexpr bool lt(char_type c1, char_type c2) noexcept {
        return (c1 < c2);
    }

    static constexpr int compare(const char_type* s1, const char_type* s2, size_t n) {
        return std::memcmp(s1, s2, n);
    }
    static constexpr size_t length(const char_type* s) {
        return std::strlen(s);
    }
    static constexpr const char_type* find(const char_type* s, size_t n, const char_type& a) {
        return static_cast<const char_type*>(std::memchr(s, a, n));
    }
    static constexpr char_type* move(char_type* s1, const char_type* s2, size_t n) {
        return static_cast<char_type*>(std::memmove(s1, s2, n));
    }
    static constexpr char_type* copy(char_type* s1, const char_type* s2, size_t n) {
        return static_cast<char_type*>(std::memcpy(s1, s2, n));
    }
    static constexpr char_type* assign(char_type* s, size_t n, char_type a) {
        return static_cast<char_type*>(std::memset(s, a, n));
    }

    static constexpr char_type to_char_type(int_type c) noexcept {
        return static_cast<char_type>(c);
    }
    static constexpr int_type to_int_type(char_type c) noexcept {
        return static_cast<int_type>(c);
    }
    static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept {
        return (c1 == c2);
    }
    static constexpr int_type eof() noexcept {
        return EOF;
    }
    static constexpr int_type not_eof(int_type c) noexcept {
        return (c != eof()) ? c : '\0';
    }
};

template<> struct char_traits<char8_t> {
    using char_type = char8_t;
    using int_type = unsigned int;
    using off_type = streamoff;

    static constexpr void assign(char_type& c1, const char_type& c2) noexcept;
    static constexpr bool eq(char_type c1, char_type c2) noexcept;
    static constexpr bool lt(char_type c1, char_type c2) noexcept;

    static constexpr int compare(const char_type* s1, const char_type* s2, size_t n);
    static constexpr size_t length(const char_type* s);
    static constexpr const char_type* find(const char_type* s, size_t n, const char_type& a);
    static constexpr char_type* move(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* copy(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* assign(char_type* s, size_t n, char_type a);

    static constexpr char_type to_char_type(int_type c) noexcept;
    static constexpr int_type to_int_type(char_type c) noexcept;
    static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
    static constexpr int_type eof() noexcept;
    static constexpr int_type not_eof(int_type c) noexcept;
};

template<> struct char_traits<char16_t> {
    using char_type = char16_t;
    using int_type = uint_least16_t;
    using off_type = streamoff;

    static constexpr void assign(char_type& c1, const char_type& c2) noexcept;
    static constexpr bool eq(char_type c1, char_type c2) noexcept;
    static constexpr bool lt(char_type c1, char_type c2) noexcept;

    static constexpr int compare(const char_type* s1, const char_type* s2, size_t n);
    static constexpr size_t length(const char_type* s);
    static constexpr const char_type* find(const char_type* s, size_t n, const char_type& a);
    static constexpr char_type* move(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* copy(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* assign(char_type* s, size_t n, char_type a);

    static constexpr char_type to_char_type(int_type c) noexcept;
    static constexpr int_type to_int_type(char_type c) noexcept;
    static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
    static constexpr int_type eof() noexcept;
    static constexpr int_type not_eof(int_type c) noexcept;
};

template<> struct char_traits<char32_t> {
    using char_type = char32_t;
    using int_type = uint_least32_t;
    using off_type = streamoff;

    static constexpr void assign(char_type& c1, const char_type& c2) noexcept;
    static constexpr bool eq(char_type c1, char_type c2) noexcept;
    static constexpr bool lt(char_type c1, char_type c2) noexcept;

    static constexpr int compare(const char_type* s1, const char_type* s2, size_t n);
    static constexpr size_t length(const char_type* s);
    static constexpr const char_type* find(const char_type* s, size_t n, const char_type& a);
    static constexpr char_type* move(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* copy(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* assign(char_type* s, size_t n, char_type a);

    static constexpr char_type to_char_type(int_type c) noexcept;
    static constexpr int_type to_int_type(char_type c) noexcept;
    static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
    static constexpr int_type eof() noexcept;
    static constexpr int_type not_eof(int_type c) noexcept;
};

template<> struct char_traits<wchar_t> {
    using char_type = wchar_t;
    using int_type = __WINT_TYPE__;
    using off_type = streamoff;

    static constexpr void assign(char_type& c1, const char_type& c2) noexcept;
    static constexpr bool eq(char_type c1, char_type c2) noexcept;
    static constexpr bool lt(char_type c1, char_type c2) noexcept;

    static constexpr int compare(const char_type* s1, const char_type* s2, size_t n);
    static constexpr size_t length(const char_type* s);
    static constexpr const char_type* find(const char_type* s, size_t n, const char_type& a);
    static constexpr char_type* move(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* copy(char_type* s1, const char_type* s2, size_t n);
    static constexpr char_type* assign(char_type* s, size_t n, char_type a);

    static constexpr char_type to_char_type(int_type c) noexcept;
    static constexpr int_type to_int_type(char_type c) noexcept;
    static constexpr bool eq_int_type(int_type c1, int_type c2) noexcept;
    static constexpr int_type eof() noexcept;
    static constexpr int_type not_eof(int_type c) noexcept;
};

} // namespace std

#endif // _EZCXX_CHAR_TRAITS
