// -*- C++ -*-
#ifndef _EZCXX_STRING
#define _EZCXX_STRING

#include <__eastl_config>
#include <initializer_list>
#include <ti/sprintf.h>
#include <cstdio>
#include <cstdlib>
#include <EASTL/string.h>
#include <__char_traits>

#pragma clang system_header

namespace std {

template<
    typename CharT,
    typename Traits = std::char_traits<CharT>,
    typename Allocator = eastl::allocator
>
using basic_string = eastl::basic_string<CharT, Allocator>;

inline string to_string(int value) {
    char buf[sizeof("-8388608")];
    boot_sprintf(buf, "%d", value);
    return string(buf);
}

inline string to_string(unsigned int value) {
    char buf[sizeof("16777215")];
    boot_sprintf(buf, "%u", value);
    return string(buf);
}

inline string to_string(long value) {
    char buf[sizeof("-2147483648")];
    std::sprintf(buf, "%ld", value);
    return string(buf);
}

inline string to_string(unsigned long value) {
    char buf[sizeof("4294967295")];
    std::sprintf(buf, "%lu", value);
    return string(buf);
}

inline string to_string(signed __int48 value) {
    char buf[sizeof("-140737488355328")];
    std::sprintf(buf, "%lld", static_cast<long long>(value));
    return string(buf);
}

inline string to_string(unsigned __int48 value) {
    char buf[sizeof("281474976710655")];
    std::sprintf(buf, "%llu", static_cast<unsigned long long>(value));
    return string(buf);
}

inline string to_string(long long value) {
    char buf[sizeof("-9223372036854775808")];
    std::sprintf(buf, "%lld", value);
    return string(buf);
}

inline string to_string(unsigned long long value) {
    char buf[sizeof("18446744073709551615")];
    std::sprintf(buf, "%llu", value);
    return string(buf);
}

inline string to_string(float value) {
    char buf[40];
    std::snprintf(buf, sizeof(buf), "%f", value);
    return string(buf);
}

inline string to_string(double value) {
    char buf[40];
    std::snprintf(buf, sizeof(buf), "%f", value);
    return string(buf);
}

inline string to_string(long double value) {
    char buf[40];
    std::snprintf(buf, sizeof(buf), "%Lf", value);
    return string(buf);
}

inline int stoi(const string& str, std::size_t* pos = nullptr, int base = 10) {
    char* end_ptr;
    int result = static_cast<int>(std::strtol(str.c_str(), &end_ptr, base));
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

inline long stol(const string& str, std::size_t* pos = nullptr, int base = 10) {
    char* end_ptr;
    long result = std::strtol(str.c_str(), &end_ptr, base);
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

inline long long stoll(const string& str, std::size_t* pos = nullptr, int base = 10) {
    char* end_ptr;
    long long result = std::strtoll(str.c_str(), &end_ptr, base);
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

inline unsigned long stoul(const string& str, std::size_t* pos = nullptr, int base = 10) {
    char* end_ptr;
    unsigned long result = std::strtoul(str.c_str(), &end_ptr, base);
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

inline unsigned long long stoull(const string& str, std::size_t* pos = nullptr, int base = 10) {
    char* end_ptr;
    unsigned long long result = std::strtoull(str.c_str(), &end_ptr, base);
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

inline float stof(const string& str, std::size_t* pos = nullptr) {
    char* end_ptr;
    float result = std::strtof(str.c_str(), &end_ptr);
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

inline double stod(const string& str, std::size_t* pos = nullptr) {
    char* end_ptr;
    double result = std::strtod(str.c_str(), &end_ptr);
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

inline long double stold(const string& str, std::size_t* pos = nullptr) {
    char* end_ptr;
    long double result = std::strtold(str.c_str(), &end_ptr);
    if (pos != nullptr) {
        *pos = static_cast<size_t>(end_ptr - str.c_str());
    }
    return result;
}

} // namespace std

#endif // _EZCXX_STRING
